package com.suneee.weixin.controller;import com.suneee.core.api.util.ContextUtil;import com.suneee.core.util.FileUtil;import com.suneee.core.web.util.RequestUtil;import com.suneee.eas.common.uploader.UploaderHandler;import com.suneee.platform.model.system.SysUser;import com.suneee.platform.service.system.SysUserService;import com.suneee.ucp.base.vo.ResultVo;import com.suneee.weixin.util.HeadImgUtil;import org.activiti.engine.impl.util.IoUtil;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.web.multipart.MultipartFile;import org.springframework.web.multipart.MultipartHttpServletRequest;import sun.nio.ch.IOUtil;import javax.annotation.Resource;import javax.servlet.ServletOutputStream;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.*;import java.util.HashMap;import java.util.Map;/** * @program: bpmx-parent * @description: 头像上传 * @author: liuhai * @create: 2018-08-13 09:30 **/@Controller@RequestMapping("/oa/user/headimg/")public class HeadImgController {    //图片大小限制    private static final int MAX_SIZE = 5000000;    @Resource    private SysUserService sysUserService;    @Autowired    private UploaderHandler uploaderHandler;    @RequestMapping("upload")    @ResponseBody    public ResultVo upload(MultipartFile file) {        String fileName = file.getOriginalFilename();        String ext = fileName.substring(fileName.lastIndexOf(".") + 1, fileName.length());        long size = file.getSize();        if (size > MAX_SIZE) {            return new ResultVo(ResultVo.COMMON_STATUS_FAILED, "上传头像失败，图片不能大于5000KB！");        }        String path = HeadImgUtil.createImgPath(ContextUtil.getCurrentUserId() + "/source." + fileName);        String downloadUrl=null;        try {            FileUtil.writeFile(path, file.getInputStream());            Map<String, Object> stringObjectMap = uploadFile(file, path);            if(stringObjectMap==null||stringObjectMap.isEmpty()){                throw new Exception();            }            Long userId = ContextUtil.getCurrentUserId();            SysUser sysUser = new SysUser();            sysUser.setHeadImgPath(path);            sysUser.setUserId(userId);//            sysUserService.addHeadImg(userId, path);            sysUserService.updateBySysUser(sysUser);            downloadUrl = com.suneee.eas.common.utils.FileUtil.getDownloadUrl(path, false);        } catch (Exception e) {             return new ResultVo(ResultVo.COMMON_STATUS_FAILED, "上传头像失败：" + e.getMessage());        }        return new ResultVo(ResultVo.COMMON_STATUS_SUCCESS, "上传头像成功。", downloadUrl);    }    /**     * 公共上传文件     * @param file     * @param savePath     * @return lhf     */    private Map<String,Object> uploadFile(MultipartFile file, String savePath){        Map<String,Object> info=new HashMap<String, Object>();        try {            uploaderHandler.upload(savePath,file.getInputStream());            info.put("path",savePath);            info.put("download", com.suneee.eas.common.utils.FileUtil.getDownloadUrl(savePath,false));            info.put("size",file.getSize());            info.put("name",file.getOriginalFilename());        } catch (Exception e) {            e.printStackTrace();            throw new RuntimeException("上传文件异常");        }        return info;    }    /*@RequestMapping("cutImage")    @ResponseBody    public ResultVo cutImage(HttpServletRequest request) {        String sourcePath = RequestUtil.getString(request, "imagePath");        String ext = sourcePath.substring(sourcePath.lastIndexOf(".") + 1, sourcePath.length());        String x = RequestUtil.getString(request, "x");        String y = RequestUtil.getString(request, "y");//        String w = RequestUtil.getString(request, "w");//        String h = RequestUtil.getString(request, "h");        int w = 400;        int h = 300;        Long userId = ContextUtil.getCurrentUserId();        String cutPath = userId + "/cut." + ext;        try {            String path = HeadImgUtil.cutImage(sourcePath, cutPath, ext, Integer.parseInt(x), Integer.parseInt(y), w, h);            sysUserService.addHeadImg(userId, path);            return new ResultVo(ResultVo.COMMON_STATUS_SUCCESS, "剪切图像成功", path);        } catch (Exception e) {            return new ResultVo(ResultVo.COMMON_STATUS_FAILED, "剪切图像失败：" + e.getMessage());        }    }*///    @RequestMapping("upHeadImg")//    public void upHeadImg(HttpServletRequest request, HttpServletResponse response) {//        try {//        Long ucUserid = RequestUtil.getLong(request, "ucUserId");//        SysUser user = sysUserService.getByUcUserId(ucUserid);//        if(user==null){//            response.getWriter().append("未找到当前用户,获取头像失败");//            return ;//        }//            FileInputStream fis;//            File file= new File(user.getHeadImgPath());//            fis = new FileInputStream(file);////            long size = file.length();//            byte[] temp = new byte[(int) size];//            fis.read(temp, 0, (int) size);//            fis.close();//            byte[] data = temp;//            OutputStream out = response.getOutputStream();//            response.setContentType("image/png");//            out.write(data);//        } catch (Exception e) {//            e.printStackTrace();//        }////    }//    @RequestMapping("getHeadImg")//    @ResponseBody//    public ResultVo getHeadImg(HttpServletRequest request, HttpServletResponse response) {//        Long ucUserid = RequestUtil.getLong(request, "ucUserid");//        SysUser user = sysUserService.getByUcUserId(ucUserid);//        String headImgPath =null;//        try {//             headImgPath = user.getHeadImgPath();//        } catch (Exception e) {//            e.printStackTrace();//            return new ResultVo(ResultVo.COMMON_STATUS_FAILED,"获取头像失败");//        }//////        return  new ResultVo(ResultVo.COMMON_STATUS_SUCCESS,"获取用户头像成功",headImgPath);//    }}