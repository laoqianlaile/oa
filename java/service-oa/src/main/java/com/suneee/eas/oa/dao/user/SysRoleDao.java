package com.suneee.eas.oa.dao.user;import com.suneee.eas.common.component.QueryFilter;import com.suneee.eas.common.dao.BaseDao;import com.suneee.eas.common.utils.ContextSupportUtil;import com.suneee.eas.common.utils.StringUtil;import com.suneee.platform.model.system.SysRole;import org.springframework.stereotype.Repository;import java.util.HashMap;import java.util.List;import java.util.Map;/** * @program: eas-parent * @description: 角色dao * @author: liuhai * @create: 2018-08-14 19:37 **/@Repositorypublic class SysRoleDao extends BaseDao<SysRole> {    /**     * 根据UserId取得系统角色     * @param userId     * @param enterpriseCode     * @return     */    public List<SysRole> getByUserId(Long userId,String enterpriseCode) {        if (StringUtil.isEmpty(enterpriseCode)){            enterpriseCode=ContextSupportUtil.getCurrentEnterpriseCode();        }        Map<String, Object> params = new HashMap<String,Object>();        params.put("userId", userId);        params.put("enterpriseCode", enterpriseCode);        return getSqlSessionTemplate().selectList(getNamespace() + ".getByUserId", params);    }    public List<SysRole> getByUserId(Long userId) {       return getByUserId(userId,null);    }    /**     * 获取所有角色分类信息     * @param filter     * @return     */    public List<String> getListCategory(QueryFilter filter){        return getSqlSessionTemplate().selectList(getNamespace() + "." + filter.getSqlKey(), filter.getFilters());    }    /**     * 验证角色名称的唯一性     * @param roleName     * @param roleId     * @param enterpriseCode     * @return     */    public SysRole getByRoleName(String roleName, Long roleId, String enterpriseCode){        Map<String, Object> params = new HashMap<String,Object>();        params.put("roleId", roleId);        params.put("enterpriseCode", enterpriseCode);        params.put("roleName", roleName);        return getSqlSessionTemplate().selectOne(getNamespace() + ".getByRoleName", params);    }    /**     * 用于新增/更新角色信息时，查询角色别名是否已经存在     * @param alias     * @param roleId     * @return     */    public SysRole getByAlias(String alias, Long roleId){        Map<String, Object> params = new HashMap<String, Object>();        params.put("alias", alias);        params.put("roleId", roleId);        return getSqlSessionTemplate().selectOne(getNamespace() + ".getByRoleAlias", params);    }    /**     * 角色禁用/启用     * @param roleId     * @param enabled     * @return     */    public int updEnabled(Long roleId, Short enabled){        Map<String, Object> params = new HashMap<String, Object>();        params.put("roleId", roleId);        params.put("enabled", enabled);        return getSqlSessionTemplate().update(getNamespace() + ".updEnabled", params);    }}