package com.suneee.eas.oa.service.system.impl;import com.suneee.core.util.BeanUtils;import com.suneee.core.util.Dom4jUtil;import com.suneee.core.util.XmlBeanUtil;import com.suneee.eas.common.component.QueryFilter;import com.suneee.eas.common.constant.SymbolConstant;import com.suneee.eas.common.service.impl.BaseServiceImpl;import com.suneee.eas.common.utils.ContextSupportUtil;import com.suneee.eas.common.utils.IdGeneratorUtil;import com.suneee.eas.common.utils.StringUtil;import com.suneee.eas.oa.dao.system.ResourcesDao;import com.suneee.eas.oa.model.system.Resources;import com.suneee.eas.oa.service.system.ResourcesService;import com.suneee.eas.oa.service.user.SysRoleService;import com.suneee.eas.oa.xml.system.ResourcesXml;import com.suneee.eas.oa.xml.system.ResourcesXmlList;import com.suneee.platform.model.system.SysUser;import com.suneee.platform.xml.util.XmlUtil;import org.apache.commons.io.IOUtils;import org.apache.logging.log4j.LogManager;import org.apache.logging.log4j.Logger;import org.dom4j.Document;import org.dom4j.Element;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Component;import java.io.InputStream;import java.io.UnsupportedEncodingException;import java.util.*;/** * @program: eas-parent * @description: 子系统资源 Service类 * @author: liuhai * @create: 2018-08-08 16:17 **/@Componentpublic class ResourcesServiceImpl extends BaseServiceImpl<Resources> implements ResourcesService {    private static final Logger log = LogManager.getLogger(ResourcesServiceImpl.class);    private ResourcesDao resourcesDao;    @Autowired    private SysRoleService sysRoleService;    @Autowired    public void setResourcesDao(ResourcesDao resourcesDao) {        this.resourcesDao = resourcesDao;        setBaseDao(resourcesDao);    }    /**     * 根据用户获取菜单数据。     *     * @param user 用户     * @return     */    @Override    public List<Resources> getSysMenu(SysUser user) throws UnsupportedEncodingException {        List<Resources> resourcesList = new ArrayList<Resources>();        // 是否是超级管理员        if (ContextSupportUtil.isSuperAdmin(user)) {            resourcesList = resourcesDao.getSuperMenu();            return resourcesList;        }        String alias = sysRoleService.getRoles(user.getUserId());        String roles = "";        if (StringUtil.isNotEmpty(alias)) {            String arrys[] = alias.split(",");            if (arrys.length > 0) {                for (int i = 0; i < arrys.length; i++) {                    roles += "'" + arrys[i] + "',";                }                roles = roles.substring(0, roles.length() - 1);            }        }        Set<Resources> resourcesSet  = getResources(roles, user.getUserId());        resourcesList.addAll(resourcesSet);        Collections.sort(resourcesList);        return resourcesList;    }    /**     * 获取资源,去重     * @param     * @return     */    private Set<Resources> getResources(String roles, Long userId) {        Set<Resources> result = new HashSet<>();        //获取公开资源        List<Resources> publicList = resourcesDao.getPublicList();        result.addAll(publicList);        //获取角色资源        List<Resources> resourcesList = null;        if(StringUtil.isNotEmpty(roles)){            resourcesList = resourcesDao.getNormMenuByAllRole(roles);        }else{            resourcesList = resourcesDao.getNormMenuByRole(userId);        }        if(null == resourcesList){            resourcesList = new ArrayList<>();        }        result.addAll(resourcesList);        return result;    }    @Override    public List<Resources> getAll(QueryFilter filter) {        return resourcesDao.getAll(filter);    }    /**     * 根据资源别名获取资源信息     *     * @param resId 资源ID     * @param alias 资源别名     * @return     */    @Override    public Resources getByAliasForCheck(Long resId, String alias) {        return resourcesDao.getByAliasForCheck(resId, alias);    }    /**     * 保存资源信息     *     * @param resources     */    @Override    public void saveResource(Resources resources) {        if (resources == null) {            return;        }        // 设置是否有子节点（1-是，0-否），默认有子节点        resources.setIsFolder(Resources.IS_FOLDER_Y);        // 设置默认图标        resources.setIcon(Resources.ICON_DEFAULT_FOLDER);        // 设置是否展开（1-是，0-否），默认不展开        resources.setIsOpen(Resources.IS_OPEN_N);        // 设置是否打开新窗口（1-是，0-否），默认不打开新窗口        resources.setIsNewOpen(Resources.IS_NEWOPEN_N);        // 设置资源路径        Long resId = resources.getResId();        if (resId == null) {            resId = IdGeneratorUtil.getNextId();        }        // 设置父资源ID，当没有父资源ID时默认为0        if (resources.getParentId() == null) {            resources.setParentId(0L);        }        Resources parentResources = this.findById(resources.getParentId());        if (parentResources == null) {            resources.setPath(resId.toString());        } else {            resources.setPath(parentResources.getPath() + SymbolConstant.SEPARATOR_COLON + resId.toString());        }        // 新增        if (resources.getResId() == null) {            resources.setResId(resId);            // 设置排序字段，默认为1            if (resources.getSn() == null) {                resources.setSn(1);            }            this.save(resources);            //修改        } else {            this.update(resources);        }    }    /**     * 更新是否显示到菜单     *     * @param resId     * @param isDisplayInMenu     */    @Override    public void updDisplay(Long resId, Short isDisplayInMenu) {        resourcesDao.updDisplay(resId, isDisplayInMenu);    }    @Override    public List<Resources> getByParentId(Long id) {        return resourcesDao.getByParentId(id);    }    /**     * 资源排序     *     * @param resIds     */    @Override    public void sort(Long[] resIds) {        if (resIds == null) {            return;        }        int length = resIds.length;        for (int i = 0; i < length; i++) {            this.updSn(resIds[i], i + 1);        }    }    //更新sn    public void updSn(Long resId, long sn) {        resourcesDao.updSn(resId, sn);    }    /**     * 导出资源     *     * @param resId     * @return     * @throws Exception     */    public String exportXml(Long[] resId, Map<String, Boolean> map) throws Exception {        ResourcesXmlList resXmlList = new ResourcesXmlList();        List<ResourcesXml> resList = new ArrayList<ResourcesXml>();        for (int i = 0; i < resId.length; i++) {            Resources resources = this.findById(resId[i]);            if (BeanUtils.isNotEmpty(resources)) {                ResourcesXml resourcesXml = new ResourcesXml();                resourcesXml = getResourcesXml(resourcesXml, resources);                resList.add(resourcesXml);            }        }        resXmlList.setResourcesXmlList(resList);        return XmlBeanUtil.marshall(resXmlList, ResourcesXmlList.class);    }    /**     * 递归查找子资源(为导出资源)     *     * @param resXml     * @param res     * @return     */    private ResourcesXml getResourcesXml(ResourcesXml resXml, Resources res) {        resXml.setResour(res);        List<Resources> resList = getByParentId(res.getResId());        if (BeanUtils.isNotEmpty(resList)) {            List<ResourcesXml> resourcesXmls = resXml.getResourcesList();            for (Resources resource : resList) {                ResourcesXml resourcesXml = new ResourcesXml();                resourcesXml = getResourcesXml(resourcesXml, resource);                resourcesXmls.add(resourcesXml);            }            resXml.setResourcesList(resourcesXmls);        }        return resXml;    }    @Override    public String importXml(InputStream inputStream, Resources parentRes) throws Exception {        ResourcesXmlList resXmlList = getResourcesXmlList(inputStream);        String mess = null;        for(int i =0;i<resXmlList.getResourcesXmlList().size();i++){           mess = addResource(resXmlList.getResourcesXmlList().get(i),parentRes);           if(StringUtil.isNotEmpty(mess)){               break;           }        }        return mess;    }    private ResourcesXmlList getResourcesXmlList(InputStream inputStream) throws Exception {        String xml = IOUtils.toString(inputStream, "utf-8");        Document doc = Dom4jUtil.loadXml(xml);        Element root = doc.getRootElement();        XmlUtil.checkXmlFormat(root, "res", "resources");        return (ResourcesXmlList) XmlBeanUtil.unmarshall(xml, ResourcesXmlList.class);    }    private String addResource(ResourcesXml resXml, Resources parentRes) {        boolean isRoot = false;        if (parentRes == null) {            parentRes = new Resources();            parentRes.setResId(0L);            parentRes.setPath("");            isRoot = true;        }        Resources res = resXml.getResour();        res.setParentId(parentRes.getResId());        if (isExistAlias(res)) {            return res.getResName() + "资源的资源别名" + res.getAlias() + "系统已存在，不可重复入库";        }        res.setResId(IdGeneratorUtil.getNextId());        if (isRoot) {            res.setPath(res.getResId().toString());        } else {            res.setPath(parentRes.getPath() + ":" + res.getResId());        }        this.save(res);        List<ResourcesXml> resXmlList = resXml.getResourcesList();        for (ResourcesXml resourcesXml : resXmlList) {            addResource(resourcesXml, res);        }        return null;    }    /**     * 判断别名是否存在     *     * @param res     * @return     */    private boolean isExistAlias(Resources res) {        Resources temp = this.getByAliasForCheck(null, res.getAlias());        if (temp != null) {            return true;        }        return false;    }    /**     * 根据主键批量删除对象     *     * @param ids     */    public void delByIds(Long[] ids) {        if (BeanUtils.isEmpty(ids)) return;        for (Long id : ids) {            deleteById(id);        }    }}