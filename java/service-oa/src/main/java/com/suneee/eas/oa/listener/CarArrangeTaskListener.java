package com.suneee.eas.oa.listener;import com.suneee.eas.common.utils.ContextSupportUtil;import com.suneee.eas.common.utils.IdGeneratorUtil;import com.suneee.eas.oa.dao.car.CarArrangeDao;import com.suneee.eas.oa.model.car.*;import com.suneee.eas.oa.service.car.*;import com.suneee.eas.oa.util.CarManagerUtil;import org.flowable.engine.delegate.TaskListener;import org.flowable.task.service.delegate.DelegateTask;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Component;/** * @program: eas-parent * @description: 派车监听器 * @author: liuhai * @create: 2018-09-30 15:24 **/@Componentpublic class CarArrangeTaskListener implements TaskListener {    @Autowired    private CarArrangeService carArrangeService;    @Autowired    private CarInfoService carInfoService;    @Autowired    private CarDriverService carDriverService;    @Autowired    private CarArrangeDao arrangeDao;    @Autowired    private CarArrangeHistoryService carArrangeHistoryService;    @Override    public void notify(DelegateTask delegateTask) {        //如果是撤回操作，则不做任何处理        String isRecover = delegateTask.getVariable("isRecover", String.class);        if("true".equals(isRecover)){            return;        }        if(TaskListener.EVENTNAME_CREATE.equals(delegateTask.getEventName())){            createNotify(delegateTask);        }else if(TaskListener.EVENTNAME_COMPLETE.equals(delegateTask.getEventName())){            completeNotify(delegateTask);        }else if(TaskListener.EVENTNAME_DELETE.equals(delegateTask.getEventName())){        }    }    /**     * 派车任务创建时执行     * @param delegateTask     */    private void createNotify(DelegateTask delegateTask){        CarApply carApply = (CarApply)delegateTask.getVariable("form");        //往派车表新增记录        CarArrange carArrange=new CarArrange();        carArrange.setArrId(IdGeneratorUtil.getNextId());        carArrange.setApplyId(carApply.getApplyId());        carArrange.setApplicantName(carApply.getApplicantName());        carArrange.setContent(carApply.getContent());        carArrange.setDestination(carApply.getDestination());        carArrange.setOrigin(carApply.getOrigin());        carArrange.setStartTime(carApply.getStartTime());        carArrange.setEndTime(carApply.getEndTime());        carArrange.setExpMileage(carApply.getExpMileage());        carArrange.setEnterpriseCode(carApply.getEnterpriseCode());        carArrange.setPassengerIds(carApply.getPassengerIds());        carArrange.setPassengerNames(carApply.getPassengerNames());        carArrange.setPassengerCount(carApply.getPassengerCount());        carArrange.setStatus(CarApply.STATUS_CAR_ARRANGE_PENDING);        carArrange.setInformType(carApply.getInformType());        carArrange.setProcInstId(delegateTask.getProcessInstanceId());        carArrange.setTaskId(delegateTask.getId());        //更新任务id        arrangeDao.save(carArrange);    }    /**     * 派车任务完成时执行     * @param delegateTask     */    private void completeNotify(DelegateTask delegateTask){        CarApply carApply = (CarApply)delegateTask.getVariable("form");        CarArrange arrange = carArrangeService.findByApplyId(carApply.getApplyId());        //锁定车辆        CarInfo carInfo = carInfoService.findById(arrange.getCarId());        if(null == carInfo){            throw new RuntimeException("派车的车辆已不存在！");        }        carInfo.setIsLock(CarInfo.CAR_ISLOCK_TRUE);        carInfoService.update(carInfo);        CarDriver carDriver = carDriverService.findById(arrange.getDriverId());        if(null == carDriver){            throw new RuntimeException("派车的司机已不存在！");        }        //保存派车记录        CarArrangeHistory history = new CarArrangeHistory();        history.setId(IdGeneratorUtil.getNextId());        history.setArrId(arrange.getArrId());        history.setApplyId(carApply.getApplyId());        history.setRemarks(arrange.getRemarks());        history.setEnterpriseCode(carApply.getEnterpriseCode());        history.setInformType(carApply.getInformType());        history.setCarId(carInfo.getCarId());        history.setCarName(carInfo.getName());        history.setPlateNum(carInfo.getPlateNum());        history.setDriverId(carDriver.getId());        history.setDriverName(carDriver.getName());        history.setApplicantName(carApply.getApplicantName());        history.setStartTime(carApply.getStartTime());        history.setEndTime(carApply.getEndTime());        history.setPassengerCount(carApply.getPassengerCount());        history.setPassengerIds(carApply.getPassengerIds());        history.setStatus(carApply.getStatus());        history.setStatusString(CarManagerUtil.getStatusString(carApply.getStatus()));        history.setContent(carApply.getContent());        history.setOrigin(carApply.getOrigin());        history.setDestination(carApply.getDestination());        history.setExpMileage(carApply.getExpMileage());        history.setPassengerNames(carApply.getPassengerNames());        history.setRefuseReason(arrange.getRefuseReason());        history.setProcInstId(carApply.getProcInstId());        history.setTaskId(arrange.getTaskId());        history.setSeatCount(carInfo.getSeatCount());        history.setMobile(arrange.getMobile());        history.setCarType(carInfo.getType());        history.setAssigneeId(ContextSupportUtil.getCurrentUserId());        history.setAssigneeName(ContextSupportUtil.getCurrentUsername());        carArrangeHistoryService.save(history);    }}