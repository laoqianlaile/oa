package com.suneee.eas.oa.controller.car;import com.suneee.eas.common.component.Pager;import com.suneee.eas.common.component.QueryFilter;import com.suneee.eas.common.component.ResponseMessage;import com.suneee.eas.common.constant.FunctionConstant;import com.suneee.eas.common.constant.ModuleConstant;import com.suneee.eas.common.utils.ContextSupportUtil;import com.suneee.eas.common.utils.DateUtil;import com.suneee.eas.common.utils.RequestUtil;import com.suneee.eas.common.utils.StringUtil;import com.suneee.eas.oa.model.car.CarArrangeHistory;import com.suneee.eas.oa.service.car.CarArrangeHistoryService;import org.apache.logging.log4j.LogManager;import org.apache.logging.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.ResponseBody;import javax.servlet.http.HttpServletRequest;import java.util.List;/** * @program: eas-parent * @description: 派车记录 * @author: liuhai * @create: 2018-10-11 10:10 **/@Controller@RequestMapping(ModuleConstant.CAR_MODULE+ FunctionConstant.CAR_ARRANGE_HISTORY)public class CarArrangeHistoryApiController {    private static final Logger logger = LogManager.getLogger(CarArrangeHistoryApiController.class);    @Autowired    private CarArrangeHistoryService carArrangeHistoryService;    @RequestMapping("listPage")    @ResponseBody    public ResponseMessage listPage(HttpServletRequest request){        try {            String startTime = RequestUtil.getString(request, "startTime");            String endTime = RequestUtil.getString(request, "endTime");            QueryFilter queryFilter = new QueryFilter("list", request);            if(StringUtil.isNotEmpty(startTime)){                queryFilter.addFilter("startTime", DateUtil.getDate(startTime));            }            if(StringUtil.isNotEmpty(endTime)){                queryFilter.addFilter("endTime" , DateUtil.getDate(endTime));            }            String enterpriseCode = ContextSupportUtil.getCurrentEnterpriseCode();            queryFilter.addFilter("enterpriseCode", enterpriseCode);            queryFilter.addFilter("assigneeId", ContextSupportUtil.getCurrentUserId());            Pager<CarArrangeHistory> list = carArrangeHistoryService.getPageBySqlKey(queryFilter);            return ResponseMessage.success("获取派车历史分页列表成功。", list);        } catch (Exception e) {            logger.error("获取派车历史分页列表失败:" + e.getMessage(), e);            return ResponseMessage.fail("获取派车历史分页列表失败！"+e.getMessage(), e);        }    }    @RequestMapping("list")    @ResponseBody    public ResponseMessage list(HttpServletRequest request){        try {            String startTime = RequestUtil.getString(request, "startTime");            String endTime = RequestUtil.getString(request, "endTime");            QueryFilter queryFilter = new QueryFilter("list", request);            if(StringUtil.isNotEmpty(startTime)){                queryFilter.addFilter("startTime", DateUtil.getDate(startTime));            }            if(StringUtil.isNotEmpty(endTime)){                queryFilter.addFilter("endTime" , DateUtil.getDate(endTime));            }            String enterpriseCode = ContextSupportUtil.getCurrentEnterpriseCode();            queryFilter.addFilter("enterpriseCode", enterpriseCode);            List<CarArrangeHistory> list = carArrangeHistoryService.getListBySqlKey(queryFilter);            return ResponseMessage.success("获取派车历史列表成功。", list);        } catch (Exception e) {            logger.error("获取派车历史列表失败:" + e.getMessage(), e);            return ResponseMessage.fail("获取派车历史列表失败！"+e.getMessage(), e);        }    }    /**     * 获取车辆安排详情     * @param request     * @return     */    @RequestMapping("findById")    @ResponseBody    public ResponseMessage findById(HttpServletRequest request){        Long id = RequestUtil.getLong(request, "id");        if(id == 0){            logger.error("获取派车历史失败，参数不能为空！");            return ResponseMessage.fail("获取派车历史失败，参数不能为空！");        }        try {            CarArrangeHistory carArrangeHistory = carArrangeHistoryService.findById(id);            return ResponseMessage.success("查询详情成功。", carArrangeHistory);        } catch (Exception e) {            logger.error("查询详情失败："+e.getMessage(), e);            return ResponseMessage.fail("查询详情失败！"+ e.getMessage(), e);        }    }}