package com.suneee.eas.oa.service.car.impl;import com.suneee.eas.common.service.impl.BaseServiceImpl;import com.suneee.eas.common.utils.ContextSupportUtil;import com.suneee.eas.common.utils.IdGeneratorUtil;import com.suneee.eas.flowable.service.ProcessCoreService;import com.suneee.eas.oa.dao.car.CarTrendsDao;import com.suneee.eas.oa.model.car.*;import com.suneee.eas.oa.service.car.*;import com.suneee.eas.oa.util.CarManagerUtil;import org.apache.commons.lang3.StringUtils;import org.flowable.bpmn.model.FlowNode;import org.flowable.bpmn.model.SequenceFlow;import org.flowable.engine.TaskService;import org.flowable.task.api.Task;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.Date;import java.util.List;import java.util.Map;/** * @program: eas-parent * @description: 出车/还车ServiceImpl * @author: liuhai * @create: 2018-08-28 11:58 **/@Servicepublic class CarTrendsServiceImpl extends BaseServiceImpl<CarTrends> implements CarTrendsService {    private CarTrendsDao carTrendsDao;    @Autowired    private CarInfoService carInfoService;    @Autowired    private CarAuditService carAuditService;    @Autowired    private TaskService taskService;    @Autowired    private ProcessCoreService processCoreService;    @Autowired    private CarTrendsHistoryService carTrendsHistoryService;    @Autowired    private CarArrangeService carArrangeService;    @Autowired    private CarDriverService carDriverService;    @Autowired    private CarApplyService carApplyService;    @Autowired    public void setCarTrendsDao(CarTrendsDao carTrendsDao) {        this.carTrendsDao = carTrendsDao;        super.setBaseDao(carTrendsDao);    }    @Override    public void updateCarTrends(CarTrends carTrends){        carTrends.setUpdateBy(ContextSupportUtil.getCurrentUserId());        carTrends.setUpdateByName(ContextSupportUtil.getCurrentUsername());        carTrends.setUpdateTime(new Date());        super.update(carTrends);    }    /**     * 出车     * @param carTrends     */    @Override    public void depart(CarTrends carTrends, int status, String currentMile){        //更新出车        this.updateCarTrends(carTrends);        carAuditService.doCarDriverOutAudit(carTrends.getTaskId());        updateCarMiles(carTrends.getCarId(), status, currentMile);    }    /**     * 不出车     * @param carTrends     */    @Override    public void departRefuse(CarTrends carTrends, int status, String currentMile){        //不出车        this.updateCarTrends(carTrends);        Task task = taskService.createTaskQuery().taskId(carTrends.getTaskId()).singleResult();        Task currentTask = taskService.createTaskQuery().processInstanceId(task.getProcessInstanceId()).singleResult();        //车辆申请回复初始状态        CarApply carApply = taskService.getVariable(currentTask.getId(), "form", CarApply.class);        if(currentTask==null) {            throw new RuntimeException("流程未启动或已执行完成，操作失败");        }        //流程返回到一个节点        Map<String, Object> param = processCoreService.jumpToFirst(task.getProcessInstanceId());        updateCarMiles(carTrends.getCarId(), status, currentMile);        carApply.setStatus(status);        saveCarOutRefuseHistory(carApply, carTrends);        //清理执行的历史数据        carApplyService.cleanData(currentTask, carApply, status, "true", "审批拒绝");        FlowNode currentFlowNode = (FlowNode)param.get("currentFlowNode");        List<SequenceFlow> currentFlows = (List<SequenceFlow>)param.get("currentFlows");        //恢复正常流程        processCoreService.jumpToCurrent(currentFlowNode, currentFlows);    }    /**     * 还车     * @param carTrends     * @param status     * @param currentMile     */    @Override    public void backCar(CarTrends carTrends, int status, String currentMile){        //还车        this.updateCarTrends(carTrends);        carAuditService.doCarDriverBackAudit(carTrends.getTaskId());        updateCarMiles(carTrends.getCarId(), status, currentMile);    }    @Override    public CarTrends findByApplyId(Long applyId){        return carTrendsDao.findByApplyId(applyId);    }    /**     * 实时更新里程数     * @param carId     * @param status     * @param currentMile     */    private void updateCarMiles(Long carId, int status, String currentMile){        //更新当前里程数        CarInfo carInfo = carInfoService.findById(carId);        if(null == carInfo){            throw new RuntimeException("该车辆已不存在！carId:" + carId);        }        //如果是还车，则修改车辆状态为未锁定        if(CarApply.STATUS_CAR_BACK_DONE == status || CarApply.STATUS_CAR_DRIVE_FAIL == status){            carInfo.setIsLock(CarInfo.CAR_ISLOCK_FALSE);        }        if(StringUtils.isNotEmpty(currentMile)){            carInfo.setCurrentMile(currentMile);        }        carInfoService.update(carInfo);    }    /**     * 不出车记录     * @param carApply     */    private void saveCarOutRefuseHistory(CarApply carApply, CarTrends carTrends){        CarArrange carArrange = carArrangeService.findByApplyId(carApply.getApplyId());        //获取司机        CarDriver carDriver = carDriverService.findById(carTrends.getCarMaker());        if(null == carDriver){            throw new RuntimeException("该司机已不存在！");        }        CarInfo carInfo = carInfoService.findById(carTrends.getCarId());        if(null == carInfo){            throw new RuntimeException("该车辆已不存在！");        }        //生成不出车记录        CarTrendsHistory history = new CarTrendsHistory();        history.setId(IdGeneratorUtil.getNextId());        history.setCarTrendsId(carTrends.getId());        history.setApplyId(carApply.getApplyId());        history.setCarId(carInfo.getCarId());        history.setCarBack(carDriver.getId());        history.setStartMileage(carTrends.getStartMileage());        history.setBackTime(carTrends.getBackTime());        history.setApplicantName(carApply.getApplicantName());        history.setPlateNum(carInfo.getPlateNum());        history.setCarName(carInfo.getName());        history.setDriverName(carDriver.getName());        history.setStartTime(carApply.getStartTime());        history.setEndTime(carApply.getEndTime());        history.setPassengerCount(carApply.getPassengerCount());        history.setDestination(carApply.getDestination());        history.setStatus(carApply.getStatus());        history.setStatusString(CarManagerUtil.getStatusString(carApply.getStatus()));        history.setOrigin(carApply.getOrigin());        history.setExpMileage(carApply.getExpMileage());        history.setPassengerNames(carApply.getPassengerNames());        history.setContent(carApply.getContent());        history.setRefuseReason(carTrends.getRefuseReason());        history.setProcInstId(carApply.getProcInstId());        history.setTaskId(carTrends.getTaskId());        history.setBackRemarks(carTrends.getBackRemarks());        history.setMobile(carArrange.getMobile());        history.setAssigneeId(ContextSupportUtil.getCurrentUserId());        history.setAssigneeName(ContextSupportUtil.getCurrentUsername());        history.setEnterpriseCode(ContextSupportUtil.getCurrentEnterpriseCode());        carTrendsHistoryService.save(history);    }}