package com.suneee.eas.oa.listener;import com.suneee.eas.common.utils.ContextSupportUtil;import com.suneee.eas.common.utils.IdGeneratorUtil;import com.suneee.eas.oa.model.car.*;import com.suneee.eas.oa.service.car.CarDriverService;import com.suneee.eas.oa.service.car.CarInfoService;import com.suneee.eas.oa.service.car.CarTrendsHistoryService;import com.suneee.eas.oa.service.car.CarTrendsService;import com.suneee.eas.oa.util.CarManagerUtil;import org.flowable.engine.delegate.TaskListener;import org.flowable.task.service.delegate.DelegateTask;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Component;/** * @program: eas-parent * @description: 还车监听类 * @author: liuhai * @create: 2018-09-30 18:37 **/@Componentpublic class CarBackTaskListener implements TaskListener {    @Autowired    private CarTrendsService carTrendsService;    @Autowired    private CarDriverService carDriverService;    @Autowired    private CarInfoService carInfoService;    @Autowired    private CarTrendsHistoryService carTrendsHistoryService;    @Override    public void notify(DelegateTask delegateTask) {        //如果是撤回操作，则不做任何处理        String isRecover = delegateTask.getVariable("isRecover", String.class);        if("true".equals(isRecover)){            return;        }        if(TaskListener.EVENTNAME_CREATE.equals(delegateTask.getEventName())){            createCarTrendsNotify(delegateTask);        }else if(TaskListener.EVENTNAME_COMPLETE.equals(delegateTask.getEventName())){            completeCarTrendsNotify(delegateTask);        }else if(TaskListener.EVENTNAME_DELETE.equals(delegateTask.getEventName())){        }    }    /**     *     * @param delegateTask     */    private void createCarTrendsNotify(DelegateTask delegateTask){        CarApply carApply = delegateTask.getVariable("form", CarApply.class);        CarTrends carTrends = carTrendsService.findByApplyId(carApply.getApplyId());        carTrends.setTaskId(delegateTask.getId());        carTrends.setProcInstId(delegateTask.getProcessInstanceId());        carTrendsService.update(carTrends);    }    public void completeCarTrendsNotify(DelegateTask delegateTask){        CarApply carApply = delegateTask.getVariable("form", CarApply.class);        CarTrends carTrends = carTrendsService.findByApplyId(carApply.getApplyId());        //获取司机        CarDriver carDriver = carDriverService.findById(carTrends.getCarMaker());        if(null == carDriver){            throw new RuntimeException("该司机已不存在！");        }        CarInfo carInfo = carInfoService.findById(carTrends.getCarId());        if(null == carInfo){            throw new RuntimeException("该车辆已不存在！");        }        //生成还车记录        CarTrendsHistory history = new CarTrendsHistory();        history.setId(IdGeneratorUtil.getNextId());        history.setCarTrendsId(carTrends.getId());        history.setApplyId(carApply.getApplyId());        history.setCarId(carInfo.getCarId());        history.setCarBack(carDriver.getId());        history.setEndMileage(carTrends.getEndMileage());        history.setBackTime(carTrends.getBackTime());        history.setApplicantName(carApply.getApplicantName());        history.setPlateNum(carInfo.getPlateNum());        history.setCarName(carInfo.getName());        history.setDriverName(carDriver.getName());        history.setStartTime(carApply.getStartTime());        history.setEndTime(carApply.getEndTime());        history.setPassengerCount(carApply.getPassengerCount());        history.setDestination(carApply.getDestination());        history.setStatus(carApply.getStatus());        history.setStatusString(CarManagerUtil.getStatusString(carApply.getStatus()));        history.setOrigin(carApply.getOrigin());        history.setExpMileage(carApply.getExpMileage());        history.setPassengerNames(carApply.getPassengerNames());        history.setContent(carApply.getContent());        history.setRefuseReason(carTrends.getRefuseReason());        history.setProcInstId(carApply.getProcInstId());        history.setTaskId(carTrends.getTaskId());        history.setBackRemarks(carTrends.getBackRemarks());        history.setMobile(carApply.getMobile());        history.setAssigneeId(ContextSupportUtil.getCurrentUserId());        history.setAssigneeName(ContextSupportUtil.getCurrentUsername());        history.setEnterpriseCode(ContextSupportUtil.getCurrentEnterpriseCode());        carTrendsHistoryService.save(history);    }}