package com.suneee.eas.oa.controller.car;import com.suneee.eas.common.component.Pager;import com.suneee.eas.common.component.QueryFilter;import com.suneee.eas.common.component.ResponseMessage;import com.suneee.eas.common.constant.FunctionConstant;import com.suneee.eas.common.constant.ModuleConstant;import com.suneee.eas.common.uploader.UploaderHandler;import com.suneee.eas.common.utils.ContextSupportUtil;import com.suneee.eas.common.utils.FileUtil;import com.suneee.eas.common.utils.RequestUtil;import com.suneee.eas.oa.model.car.CarInfo;import com.suneee.eas.oa.model.car.OilCard;import com.suneee.eas.oa.service.car.CarInfoService;import com.suneee.eas.oa.service.car.OilCardService;import com.suneee.eas.oa.service.user.UserService;import com.suneee.platform.model.system.SysUser;import org.apache.logging.log4j.LogManager;import org.apache.logging.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.web.multipart.MultipartFile;import org.springframework.web.multipart.MultipartHttpServletRequest;import javax.servlet.http.HttpServletRequest;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;/** * @program: eas-parent * @description: 车辆信息 * @author: liuhai * @create: 2018-08-20 13:10 **/@Controller@RequestMapping(ModuleConstant.CAR_MODULE + FunctionConstant.CAR_INFO)public class CarInfoApiController {    private static final Logger logger = LogManager.getLogger(CarInfoApiController.class);    @Autowired    private CarInfoService carInfoService;    @Autowired    private UserService userService;    @Autowired    private UploaderHandler uploaderHandler;    @Autowired    private OilCardService oilCardService;    /**     * 新增/更新车辆信息     *     * @param request     * @param carInfo     * @return     */    @RequestMapping("save")    @ResponseBody    public ResponseMessage save(HttpServletRequest request, CarInfo carInfo) {        ResponseMessage mess = new ResponseMessage();        mess.setStatus(ResponseMessage.STATUS_SUCCESS);        //车牌号是否存在        boolean isPlateNumExist = carInfoService.isPlateNumExist(carInfo.getPlateNum(), carInfo.getCarId());        if(isPlateNumExist){            mess.setStatus(ResponseMessage.STATUS_FAIL);            mess.setMessage("该车牌号已存在！");            return mess;        }        Long carId = carInfo.getCarId();        if(null == carId){            carId = 0l;        }        try {            if (carId == 0) {                carInfoService.save(carInfo);                mess.setMessage("新增车辆信息成功。");            } else {                carInfoService.update(carInfo);                mess.setMessage("更新车辆信息成功。");            }        } catch (Exception e) {            mess.setStatus(ResponseMessage.STATUS_FAIL);            mess.setData(e);            if (carId == 0) {                mess.setMessage("新增车辆信息失败:"+e.getMessage());            } else {                mess.setMessage("更新车辆信息失败:"+e.getMessage());            }            logger.error(mess.getMessage(), e);        }        return mess;    }    /**     * 获取车辆信息分页列表     * @param request     * @return     */    @RequestMapping("listPage")    @ResponseBody    public ResponseMessage listPage(HttpServletRequest request) {        QueryFilter filter = new QueryFilter("list", request);        try {            filter.addFilter("enterpriseCode", ContextSupportUtil.getCurrentEnterpriseCode());            Pager<CarInfo> carList = carInfoService.getPageBySqlKey(filter);            return ResponseMessage.success("获取车辆信息分页列表成功。", carList);        } catch (Exception e) {            logger.error("获取车辆信息分页列表失败:" + e.getMessage(), e);            return ResponseMessage.fail("获取车辆信息分页列表失败!"+e.getMessage(),e);        }    }    /**     * 获取车辆信息列表     * @param request     * @return     */    @RequestMapping("list")    @ResponseBody    public ResponseMessage list(HttpServletRequest request){        QueryFilter filter = new QueryFilter("list", request);        try {            filter.addFilter("enterpriseCode", ContextSupportUtil.getCurrentEnterpriseCode());            List<CarInfo> carList = carInfoService.getListBySqlKey(filter);            return ResponseMessage.success("获取车辆信息列表成功。", carList);        } catch (Exception e) {            logger.error("获取车辆信息列表失败:" + e.getMessage(), e);            return ResponseMessage.fail("获取车辆信息列表失败!"+ e.getMessage(), e);        }    }    /**     * 根据id查找车辆信息     *     * @param request     * @return     */    @RequestMapping("findById")    @ResponseBody    public ResponseMessage findById(HttpServletRequest request) {        Long carId = RequestUtil.getLong(request, "carId");        try {            if (carId == 0) {                return ResponseMessage.fail("获取车辆信息失败，参数carId不能为空！");            }            CarInfo carInfo = carInfoService.findById(carId);            return ResponseMessage.success("获取车辆信息成功。", carInfo);        } catch (Exception e) {            logger.error("获取车辆信息失败:" + e.getMessage(), e);            return ResponseMessage.fail("获取车辆信息失败"+ e.getMessage(),e);        }    }    /**     * 根据id删除车辆信息     *     * @param request     * @return     */    @RequestMapping("deleteByIds")    @ResponseBody    public ResponseMessage deleteByIds(HttpServletRequest request) {        Long[] carIds = RequestUtil.getLongAry(request, "carIds");        try {            if (carIds.length <= 0) {                return ResponseMessage.fail("删除车辆信息失败, 参数为空！");            }            for (int i = 0; i < carIds.length; i++) {                CarInfo info = carInfoService.findById(carIds[i]);                if(info.getIsLock()){                    throw new RuntimeException("车牌号为"+info.getPlateNum()+"的车辆正在出车中，不能删除！");                }                Long cardId = info.getCardId();                //删除前闲置油卡                if(null != cardId){                    OilCard oilCard = oilCardService.findById(cardId);                    byte status = 1;                    oilCard.setStatus(status);                    oilCardService.update(oilCard);                }                carInfoService.removeById(carIds[i]);            }            return ResponseMessage.success("删除车辆信息成功。");        } catch (Exception e) {            logger.error("删除车辆信息失败:" + e.getMessage(), e);            return ResponseMessage.fail("删除车辆信息失败！"+ e.getMessage(),e);        }    }    /**     * 获取车辆管理员选择器     * @param request     * @return     */    @RequestMapping("getManagerList")    @ResponseBody    public ResponseMessage getCarManagerList(HttpServletRequest request){        try {            List<SysUser> list = userService.getCurrentEnterpriseUserList(null);            return ResponseMessage.success("获取车辆管理员选择器成功", list);        } catch (Exception e) {            logger.error("获取车辆管理员选择器失败:"+e.getMessage(), e);            return ResponseMessage.fail("获取车辆管理员选择器失败!"+ e.getMessage(),e);        }    }    /**     * 上传车辆图片     * @param request     * @return     */    @RequestMapping("upload")    @ResponseBody    public ResponseMessage carPictureUpload(MultipartHttpServletRequest request){        try {            List<MultipartFile> files = request.getFiles("files");            if(null == files && files.size() <= 0){                logger.error("上传照片失败，照片不存在！");                return ResponseMessage.fail("上传照片失败，照片不存在！");            }            List<Map<String, Object>> infos = new ArrayList<>();            for(MultipartFile file:files){                String path = FileUtil.getUploadCarInfoPath(file.getOriginalFilename());                uploaderHandler.upload(path, file.getInputStream());                Map<String, Object> info = new HashMap<>();                info.put("path", path);                info.put("size", file.getSize());                info.put("name", file.getOriginalFilename());                infos.add(info);            }            return ResponseMessage.success("上传照片成功", infos);        } catch (Exception e) {            logger.error("上传车辆图片失败:"+e.getMessage(), e);            return ResponseMessage.fail("上传照片失败!"+ e.getMessage(),e);        }    }    /**     * 下载车辆图片     * @param request     * @return     */    @RequestMapping("getPicUrl")    @ResponseBody    public ResponseMessage getCarPictureUrl(HttpServletRequest request){        try {            Long carId = RequestUtil.getLong(request, "carId");            if(carId == 0){                logger.error("获取照片失败, carId为空！");                return ResponseMessage.fail("获取照片失败, carId不存在！");            }            CarInfo carInfo = carInfoService.findById(carId);            if(null == carInfo){                logger.error("获取照片失败, carId为空！");                return ResponseMessage.fail("获取照片失败, 该车辆已不存在！carId:" + carId);            }            String path = carInfo.getPicture();            String url = uploaderHandler.getFileUrl(path);            return ResponseMessage.success("获取照片成功", url);        } catch (Exception e) {            logger.error("获取照片失败:"+e.getMessage(), e);            return ResponseMessage.fail("获取照片失败!"+e.getMessage(), e);        }    }    @RequestMapping("getCardSelector")    @ResponseBody    public ResponseMessage getCardList(HttpServletRequest request){        QueryFilter queryFilter = new QueryFilter("listAll", request);        queryFilter.addFilter("enterpriseCode", ContextSupportUtil.getCurrentEnterpriseCode());        queryFilter.addFilter("status", 1);        try {            List<OilCard> list = oilCardService.getListBySqlKey(queryFilter);            return ResponseMessage.success("获取列表成功!", list);        } catch (Exception e) {            logger.error("获取列表失败!" + e.getMessage());            return ResponseMessage.fail("获取列表失败!"+e.getMessage(),e);        }    }    /**     * 获取车辆信息列表(未锁定和正常的)     * @param request     * @return     */    @RequestMapping("getFreeCarList")    @ResponseBody    public ResponseMessage listWell(HttpServletRequest request){        QueryFilter queryFilter = new QueryFilter("listFree", request);        queryFilter.addFilter("enterpriseCode", ContextSupportUtil.getCurrentEnterpriseCode());        try {            List<CarInfo> carList = carInfoService.getListBySqlKey(queryFilter);            return ResponseMessage.success("获取车辆信息列表成功。", carList);        } catch (Exception e) {            logger.error("获取车辆信息列表失败:" + e.getMessage(), e);            return ResponseMessage.fail("获取车辆信息列表失败!"+ e.getMessage(), e);        }    }}