package com.suneee.eas.oa.controller.car;import com.suneee.eas.common.component.Pager;import com.suneee.eas.common.component.QueryFilter;import com.suneee.eas.common.component.ResponseMessage;import com.suneee.eas.common.constant.FunctionConstant;import com.suneee.eas.common.constant.ModuleConstant;import com.suneee.eas.common.utils.ContextSupportUtil;import com.suneee.eas.common.utils.DateUtil;import com.suneee.eas.common.utils.RequestUtil;import com.suneee.eas.common.utils.StringUtil;import com.suneee.eas.oa.model.car.CarApply;import com.suneee.eas.oa.model.car.CarTrends;import com.suneee.eas.oa.service.car.CarTrendsService;import org.apache.logging.log4j.LogManager;import org.apache.logging.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.ResponseBody;import javax.servlet.http.HttpServletRequest;import java.util.Date;import java.util.List;/** * @program: eas-parent * @description: 出车/还车controller类 * @author: liuhai * @create: 2018-08-28 13:17 **/@Controller@RequestMapping(ModuleConstant.CAR_MODULE + FunctionConstant.CAR_TRENDS)public class CarTrendsApiController {    private static final Logger logger = LogManager.getLogger(CarTrendsApiController.class);    @Autowired    private CarTrendsService carTrendsService;    /**     * 获取车辆动态信息分页列表     * @param request     * @return     */    @RequestMapping("listPage")    @ResponseBody    public ResponseMessage listPage(HttpServletRequest request){        try {            String startTime = RequestUtil.getString(request, "startTime");            String endTime = RequestUtil.getString(request, "endTime");            Boolean isProcess = RequestUtil.getBoolean(request, "isProcess");            QueryFilter filter = new QueryFilter("list", request);            filter.addFilter("isProcess", isProcess);            if(StringUtil.isNotEmpty(startTime)){                filter.addFilter("startTime", DateUtil.getDate(startTime));            }            if(StringUtil.isNotEmpty(endTime)){                filter.addFilter("endTime" , DateUtil.getDate(endTime));            }            filter.addFilter("userId", ContextSupportUtil.getCurrentUserId());            String enterpriseCode = ContextSupportUtil.getCurrentEnterpriseCode();            filter.addFilter("enterpriseCode", enterpriseCode);            Pager<CarTrends> list = carTrendsService.getPageBySqlKey(filter);            return ResponseMessage.success("获取车辆动态信息分页列表成功。", list);        } catch (Exception e) {            logger.error("获取车辆动态信息分页列表失败:"+e.getMessage(), e);            return ResponseMessage.fail("获取车辆动态信息分页列表失败！"+e.getMessage(),e);        }    }    /**     * 获取车辆动态信息列表     * @param request     * @return     */    @RequestMapping("list")    @ResponseBody    public ResponseMessage list(HttpServletRequest request){        try {            String startTime = RequestUtil.getString(request, "startTime");            String endTime = RequestUtil.getString(request, "endTime");            Boolean isProcess = RequestUtil.getBoolean(request, "isProcess");            QueryFilter filter = new QueryFilter("list", request);            filter.addFilter("isProcess", isProcess);            if(StringUtil.isNotEmpty(startTime)){                filter.addFilter("startTime", DateUtil.getDate(startTime));            }            if(StringUtil.isNotEmpty(endTime)){                filter.addFilter("endTime" , DateUtil.getDate(endTime));            }            String enterpriseCode = ContextSupportUtil.getCurrentEnterpriseCode();            filter.addFilter("enterpriseCode", enterpriseCode);            List<CarTrends> list = carTrendsService.getListBySqlKey(filter);            return ResponseMessage.success("获取车辆动态信息列表成功。", list);        } catch (Exception e) {            logger.error("获取车辆动态信息列表失败:"+e.getMessage(), e);            return ResponseMessage.fail("获取车辆动态信息列表失败！"+e.getMessage(),e);        }    }    /**     * 根据id 查询详情     * @param request     * @return     */    @RequestMapping("findById")    @ResponseBody    public ResponseMessage getById(HttpServletRequest request){        Long id = RequestUtil.getLong(request, "carTrendsId");        if(id == 0){            return ResponseMessage.fail("获取车辆信息失败，参数carId不能为空！");        }        try {            CarTrends carTrends = carTrendsService.findById(id);            return ResponseMessage.success("查询详情成功。", carTrends);        } catch (Exception e) {            logger.error("查询详情失败："+e.getMessage(), e);            return ResponseMessage.fail("查询详情失败！"+e.getMessage(),e);        }    }    /**     * 出车/还车     * @param request     * @return     */    @RequestMapping("depart")    @ResponseBody    public ResponseMessage depart(HttpServletRequest request){        Long status = RequestUtil.getLong(request, "status");        Long id = RequestUtil.getLong(request, "carTrendsId");        String currentMile = RequestUtil.getString(request, "currentMile");        String departRemarks = RequestUtil.getString(request, "departRemarks");        String backRemarks = RequestUtil.getString(request, "backRemarks");        String refuseReason = RequestUtil.getString(request, "refuseReason");        if(null == status || null == id){            return ResponseMessage.fail("操作失败，缺少参数");        }        CarTrends carTrends = carTrendsService.findById(id);        try {            if(CarApply.STATUS_CAR_BACK_PENDING == status.intValue()){                carTrends.setStartMileage(currentMile);                carTrends.setMakeTime(new Date());                carTrends.setDepartRemarks(departRemarks);                carTrendsService.depart(carTrends, status.intValue(), currentMile);            }else if(CarApply.STATUS_CAR_BACK_DONE == status.intValue()){                if(Integer.parseInt(currentMile)<=Integer.parseInt(carTrends.getStartMileage())){                    return ResponseMessage.fail("操作失败，还车里程数必须大于出车里程数！");                }                carTrends.setEndMileage(currentMile);                carTrends.setBackTime(new Date());                carTrends.setCarBack(ContextSupportUtil.getCurrentUserId());                carTrends.setBackRemarks(backRemarks);                carTrendsService.backCar(carTrends, status.intValue(), currentMile);            }else if(CarApply.STATUS_CAR_DRIVE_FAIL == status.intValue()){                //不同意，驳回到发起人                carTrends.setRefuseReason(refuseReason);                carTrendsService.departRefuse(carTrends, status.intValue(), currentMile);            }            return ResponseMessage.success("操作成功。");        } catch (Exception e) {            logger.error("操作失败:" + e.getMessage(), e);            return ResponseMessage.fail("操作失败:"+e.getMessage(),e);        }    }}