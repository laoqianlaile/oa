package com.suneee.eas.oa.controller.system;import com.suneee.eas.common.component.ResponseMessage;import com.suneee.eas.common.constant.FunctionConstant;import com.suneee.eas.common.constant.ModuleConstant;import com.suneee.eas.common.utils.IdGeneratorUtil;import com.suneee.eas.common.utils.RequestUtil;import com.suneee.eas.oa.model.system.RoleResources;import com.suneee.eas.oa.service.system.RoleResourcesService;import com.suneee.eas.oa.service.user.SysRoleService;import org.apache.logging.log4j.LogManager;import org.apache.logging.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.ResponseBody;import javax.servlet.http.HttpServletRequest;import java.io.UnsupportedEncodingException;import java.util.List;/** * @program: eas-parent * @description: 资源角色controller * @author: liuhai * @create: 2018-08-23 11:51 **/@Controller@RequestMapping(ModuleConstant.SYSTEM_MODULE + FunctionConstant.ROLE_RESOURCES)public class RoleResourcesController {    private static final Logger logger = LogManager.getLogger(RoleResourcesController.class);    @Autowired    private RoleResourcesService roleResourcesService;    @Autowired    private SysRoleService roleService;    @RequestMapping("save")    @ResponseBody    public ResponseMessage save(HttpServletRequest request) {        Long roleId = RequestUtil.getLong(request, "roleId");        Long[] resIds = RequestUtil.getLongAryByStr(request, "resId");        if(roleId == 0){            logger.error("功能授权失败：角色ID为空！");            return ResponseMessage.fail("功能授权失败：角色ID为空！");        }        try {            //先删除旧的资源角色关系            roleResourcesService.deleteByRoleId(roleId);            //建立新的资源角色关系            if(resIds.length > 0){                for(Long resId:resIds){                    RoleResources roleResources = new RoleResources();                    roleResources.setRoleResId(IdGeneratorUtil.getNextId());                    roleResources.setResId(resId);                    roleResources.setRoleId(roleId);                    roleResourcesService.save(roleResources);                }            }            return ResponseMessage.success("功能授权成功！");        } catch (Exception e) {            logger.error("功能授权失败：" + e.getMessage(), e);            return ResponseMessage.fail("功能授权失败!", e);        }    }    /**     * 根据用户ID与企业获取角色     * @param userId     * @param enterpriseCode     * @return     * @throws UnsupportedEncodingException     */    @RequestMapping("getRolesByUserId")    @ResponseBody    public List<String> getRolesByUserId(@RequestParam Long userId,@RequestParam String enterpriseCode) throws UnsupportedEncodingException {        return roleService.getRolesByUserId(userId,enterpriseCode);    }    /**     * 根据用户ID与企业获取角色ids     * @param userId     * @param enterpriseCode     * @return     * @throws UnsupportedEncodingException     */    @RequestMapping("getRoleIdsByUserId")    @ResponseBody    public List<Long> getRoleIdsByUserId(@RequestParam Long userId,@RequestParam String enterpriseCode) throws UnsupportedEncodingException {        return roleService.getRoleIdsByUserId(userId,enterpriseCode);    }}