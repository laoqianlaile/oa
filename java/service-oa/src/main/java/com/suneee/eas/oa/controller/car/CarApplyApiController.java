package com.suneee.eas.oa.controller.car;import com.suneee.core.util.BeanUtils;import com.suneee.eas.common.component.Pager;import com.suneee.eas.common.component.QueryFilter;import com.suneee.eas.common.component.ResponseMessage;import com.suneee.eas.common.constant.FunctionConstant;import com.suneee.eas.common.constant.ModuleConstant;import com.suneee.eas.common.utils.ContextSupportUtil;import com.suneee.eas.common.utils.DateUtil;import com.suneee.eas.common.utils.RequestUtil;import com.suneee.eas.common.utils.StringUtil;import com.suneee.eas.flowable.service.ProcessCoreService;import com.suneee.eas.oa.model.car.CarApply;import com.suneee.eas.oa.service.car.CarApplyService;import org.apache.logging.log4j.LogManager;import org.apache.logging.log4j.Logger;import org.flowable.engine.RuntimeService;import org.flowable.engine.TaskService;import org.flowable.task.api.Task;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.validation.annotation.Validated;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.web.bind.annotation.RestController;import javax.servlet.http.HttpServletRequest;import java.util.Map;/** * 车辆申请 * @author 子华 * @create 2018/9/4 */@RestController@RequestMapping(ModuleConstant.CAR_MODULE+ FunctionConstant.CAR_APPLY)public class CarApplyApiController {    private static final Logger log = LogManager.getLogger(CarApplyApiController.class);    @Autowired    private CarApplyService applyService;    @Autowired    private TaskService taskService;    @Autowired    private RuntimeService runtimeService;    @Autowired    private ProcessCoreService processCoreService;    /**     * 获取车辆申请列表     * @param request     * @return     */    @RequestMapping("list")    public ResponseMessage list(HttpServletRequest request){        String startTime = RequestUtil.getString(request, "beginUseTime");        String endTime = RequestUtil.getString(request, "endUseTime");        String beginCreateTime = RequestUtil.getString(request, "beginCreateTime");        String endCreateTime = RequestUtil.getString(request, "endCreateTime");        QueryFilter filter=new QueryFilter("listAll",request);        if(StringUtil.isNotEmpty(startTime)){            filter.addFilter("beginUseTime", DateUtil.getDate(startTime));        }        if(StringUtil.isNotEmpty(endTime)){            filter.addFilter("endUseTime" , DateUtil.getDate(endTime));        }        if(StringUtil.isNotEmpty(endTime)){            filter.addFilter("beginCreateTime" , DateUtil.getDate(beginCreateTime));        }        if(StringUtil.isNotEmpty(endTime)){            filter.addFilter("endCreateTime" , DateUtil.getDate(endCreateTime));        }        filter.addFilter("isDelete",CarApply.DELETE_NO);        filter.addFilter("applicantId",ContextSupportUtil.getCurrentUserId());        Pager<CarApply> applyPager=applyService.getPageBySqlKey(filter);        return ResponseMessage.success("获取车辆申请列表成功",applyPager);    }    /**     * 提交车辆申请     * @param carApply     * @return     */    @RequestMapping("save")    public ResponseMessage save(@Validated CarApply carApply){        applyService.save(carApply);        return ResponseMessage.success("提交车辆申请成功");    }    /**     * 更新车辆管理     * @param carApply     * @return     */    @RequestMapping("update")    public ResponseMessage update(@Validated CarApply carApply, HttpServletRequest request){        carApply.setStatus(CarApply.STATUS_AUDIT_AUDITING);        CarApply applyForm=applyService.findById(carApply.getApplyId());        Task task=taskService.createTaskQuery().processInstanceId(applyForm.getProcInstId()).singleResult();        BeanUtils.copyNotNullProperties(applyForm,carApply);        applyService.update(applyForm);        Map<String,Object> variables=task.getProcessVariables();        String userId = RequestUtil.getString(request, "userId");        variables.put("form",applyForm);        variables.put("auditorId", userId);        taskService.removeVariable(task.getId(), "isRecover");        taskService.complete(task.getId(),variables);        return ResponseMessage.success("车辆申请更新成功");    }    /**     * 根据ID获取详情     * @param id     * @return     */    @RequestMapping("findById")    public ResponseMessage findById(@RequestParam Long id){        CarApply carApply=applyService.findById(id);        if (carApply==null){            return ResponseMessage.fail("详情数据不存在");        }        return ResponseMessage.success("获取详情数据成功",carApply);    }    /**     * 取消申请     * @param id     * @return     */    @RequestMapping("cancel")    public ResponseMessage cancel(@RequestParam Long id){        CarApply carApply = applyService.findById(id);        carApply.setStatus(CarApply.STATUS_CANCEL);        applyService.update(carApply);        runtimeService.deleteProcessInstance(carApply.getProcInstId(),"取消车辆申请");        return ResponseMessage.success("取消申请成功");    }    /**     * 撤回操作     * @param request     * @return     */    @RequestMapping("recover")    public ResponseMessage recover(HttpServletRequest request){        String procInstId= RequestUtil.getString(request,"procInstId");        applyService.recover(procInstId, CarApply.STATUS_AUDIT_FEEBACK);        return ResponseMessage.success("撤回申请成功");    }    /**     * 车辆流程详情汇总接口     * @param request     * @return     */    @RequestMapping("details")    @ResponseBody    public ResponseMessage details(HttpServletRequest request){        Long applyId = RequestUtil.getLong(request, "applyId");        Map<String, Object> results = applyService.getDetails(applyId);        return ResponseMessage.success("获取详情成功。", results);    }}