package com.suneee.eas.oa.service.user.impl;import com.suneee.core.consts.SystemConst;import com.suneee.core.util.BeanUtils;import com.suneee.eas.common.component.QueryFilter;import com.suneee.eas.common.constant.SymbolConstant;import com.suneee.eas.common.service.impl.BaseServiceImpl;import com.suneee.eas.common.utils.ContextSupportUtil;import com.suneee.eas.common.utils.IdGeneratorUtil;import com.suneee.eas.common.utils.PinyinUtil;import com.suneee.eas.oa.dao.user.SysRoleDao;import com.suneee.eas.oa.service.user.SysOrgRoleService;import com.suneee.eas.oa.service.user.SysOrgService;import com.suneee.eas.oa.service.user.SysRoleService;import com.suneee.eas.oa.service.user.UserService;import com.suneee.platform.model.system.SysOrg;import com.suneee.platform.model.system.SysOrgRole;import com.suneee.platform.model.system.SysRole;import com.suneee.platform.model.system.SysUser;import org.apache.commons.lang.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.core.GrantedAuthority;import org.springframework.stereotype.Service;import java.io.UnsupportedEncodingException;import java.util.ArrayList;import java.util.List;/** * @program: eas-parent * @description: 角色类 * @author: liuhai * @create: 2018-08-14 19:33 **/@Servicepublic class SysRoleServiceImpl extends BaseServiceImpl<SysRole> implements SysRoleService {    private SysRoleDao sysRoleDao;    @Autowired    private SysOrgRoleService sysOrgRoleService;    @Autowired    private SysOrgService sysOrgService;    @Autowired    private UserService userService;    @Autowired    public void setSysRoleDao(SysRoleDao sysRoleDao) {        this.sysRoleDao = sysRoleDao;        setBaseDao(sysRoleDao);    }    /**     * 获取用户权限     *     * @param userId     * @return     */    @Override    public String getRoles(Long userId) throws UnsupportedEncodingException {        List<String> roles = this.getRolesByUserId(userId);        String result = "";        for (int i = 0; i < roles.size(); i++) {            if (i == roles.size() - 1) {                result = result + roles.get(i);            } else {                result = result + roles.get(i) + ",";            }        }        return result;    }    /**     * 根据用户ID获取用户角色     * <pre>     * 1、用户和角色有映射关系，可以获取到用户所拥有的角色；     * 2、组织和角色有映射关系，可以获取到组织所拥有的角色；     * 3、用户可以切换当前组织，根据用户ID和用户的组织可以获取到2个角色列表的并集。     * </pre>     *     * @param userId     * @return     */    @Override    public List<String> getRolesByUserId(Long userId,String enterpriseCode) throws UnsupportedEncodingException {        List<String> totalRoles = new ArrayList<String>();        //根据用户获取        List<String> userRoles = getUserRoles(userId,enterpriseCode);        if (BeanUtils.isNotEmpty(userRoles)) {            totalRoles.addAll(userRoles);        }        SysUser user= userService.getUserDetails(userId);        //根据组织获取        List<String> roleRoles = getOrgRoles(userId, enterpriseCode);        if (BeanUtils.isNotEmpty(roleRoles)) {            totalRoles.addAll(roleRoles);        }        //是超级管理员，则添加超管角色        if (ContextSupportUtil.isSuperAdmin(user)) {            GrantedAuthority auth = SystemConst.ROLE_GRANT_SUPER;            totalRoles.add(auth.getAuthority());        }        return totalRoles;    }    @Override    public List<String> getRolesByUserId(Long userId) throws UnsupportedEncodingException {        return getRolesByUserId(userId,null);    }    /**     * 根据用户角色关系获取角色。     *     * @param userId     * @param enterpriseCode     * @return     */    private List<String> getUserRoles(Long userId,String enterpriseCode) {        //获取用户角色。        List<SysRole> userRoleList = sysRoleDao.getByUserId(userId,enterpriseCode);        List<String> userRoles = new ArrayList<String>();        if (BeanUtils.isNotEmpty(userRoleList)) {            for (SysRole role : userRoleList) {                if (null == role) {                    continue;                }                userRoles.add(role.getAlias());            }        }        return userRoles;    }    /**     * 获取用户的组织权限     *     * @param userId     * @param enterpriseCode     * @return     */    private List<String> getOrgRoles(Long userId, String enterpriseCode) {        List<String> roles = new ArrayList<String>();        List<SysOrg> orgList = sysOrgService.getSysOrgList(userId, enterpriseCode);        List<SysOrgRole> orgRoles = null;        if (BeanUtils.isNotEmpty(orgList)) {            for (SysOrg org : orgList) {                orgRoles = sysOrgRoleService.getRolesByOrgId(org.getOrgId(),enterpriseCode);                if (BeanUtils.isNotEmpty(orgRoles)) {                    break;                }            }            for (SysOrgRole sysOrgRole : orgRoles) {                SysRole role = sysOrgRole.getRole();                if (null == role) {                    continue;                }                roles.add(role.getAlias());            }        }        return roles;    }    /**     * 获取所有角色分类信息     * @param filter     * @return     */    @Override    public List<String> getListCategory(QueryFilter filter) {       return sysRoleDao.getListCategory(filter);    }    /**     * 验证角色名称的唯一性     * @param roleName     * @param roleId     * @param enterpriseCode     * @return     */    public SysRole getByRoleName(String roleName, Long roleId, String enterpriseCode){        return sysRoleDao.getByRoleName(roleName, roleId, enterpriseCode);    }    @Override    public void saveRole(SysRole sysRole) {        if(sysRole == null){            return;        }        // 设置角色别名        StringBuffer alias =new StringBuffer(PinyinUtil.getPinYinHeadCharFilter(sysRole.getRoleName()));        if(StringUtils.isNotBlank(sysRole.getEnterpriseCode())){            alias.insert(0, SymbolConstant.SEPARATOR_UNDERLINE);            alias.insert(0, sysRole.getEnterpriseCode().toLowerCase());        }        sysRole.setAlias(this.getUniqueAlias(alias.toString(), sysRole.getRoleId(), 0));        // 设置是否允许删除，默认为1        sysRole.setAllowDel((short)1);        // 设置是否允许编辑，默认为1        sysRole.setAllowEdit((short)1);        if(sysRole.getRoleId() == null){            sysRole.setRoleId(IdGeneratorUtil.getNextId());            super.save(sysRole);        } else {            super.update(sysRole);        }    }    /**     * 获取唯一角色别名     * @param alias     * @param roleId     * @param index     * @return     */    private String getUniqueAlias(String alias, Long roleId, int index){        String tmpAlias = alias;        if(index > 0){            tmpAlias = alias + index;        }        SysRole sysRole = sysRoleDao.getByAlias(tmpAlias, roleId);        if(sysRole != null ){            tmpAlias = getUniqueAlias(alias, roleId, index++);        }        return tmpAlias;    }    @Override    public void delByIds(Long[] ids){        if(ids.length > 0){            for(Long id:ids){                super.deleteById(id);            }        }    }    /**     * 角色禁用/启用     * @param roleId     * @param enabled     */    public void updEnabled(Long roleId, Short enabled){        sysRoleDao.updEnabled(roleId, enabled);    }    public List<Long> getRoleIdsByUserId(Long userId,String enterpriseCode){        List<SysRole> roleList = sysRoleDao.getByUserId(userId,enterpriseCode);        List<Long> userRoles = new ArrayList<Long>();        if (BeanUtils.isNotEmpty(roleList)) {            for (SysRole role : roleList) {                if (null == role) {                    continue;                }                userRoles.add(role.getRoleId());            }        }        return userRoles;    }}