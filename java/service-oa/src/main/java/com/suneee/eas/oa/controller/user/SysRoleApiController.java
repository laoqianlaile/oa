package com.suneee.eas.oa.controller.user;import com.suneee.eas.common.component.Pager;import com.suneee.eas.common.component.QueryFilter;import com.suneee.eas.common.component.ResponseMessage;import com.suneee.eas.common.constant.FunctionConstant;import com.suneee.eas.common.constant.ModuleConstant;import com.suneee.eas.common.utils.ContextSupportUtil;import com.suneee.eas.common.utils.RequestUtil;import com.suneee.eas.common.utils.StringUtil;import com.suneee.eas.oa.service.user.SysRoleService;import com.suneee.platform.model.system.SysRole;import com.suneee.platform.service.bpm.thread.MessageUtil;import org.apache.commons.lang.StringUtils;import org.apache.logging.log4j.LogManager;import org.apache.logging.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.ResponseBody;import javax.servlet.http.HttpServletRequest;import java.util.List;/** * @program: eas-parent * @description: 角色controller * @author: liuhai * @create: 2018-08-23 14:17 **/@Controller@RequestMapping(ModuleConstant.SYSTEM_MODULE + FunctionConstant.SYS_ROLE)public class SysRoleApiController {    private static final Logger logger = LogManager.getLogger(SysRoleApiController.class);    @Autowired    private SysRoleService sysRoleService;    /**     * 获取系统所有角色信息     * @param request     * @return     */    @RequestMapping("getAll")    @ResponseBody    public ResponseMessage getAll(HttpServletRequest request){        QueryFilter queryFilter = new QueryFilter("list", request);        queryFilter.addFilter("enterpriseCode", ContextSupportUtil.getCurrentEnterpriseCode());        try {            List<SysRole> roleList = sysRoleService.getListBySqlKey(queryFilter);            return ResponseMessage.success("获取系统所有角色信息成功！", roleList);        } catch (Exception e) {            logger.error("获取系统所有角色信息失败：" + e.getMessage(), e);            return ResponseMessage.fail("获取系统所有角色信息失败!", e);        }    }    /**     * 获取系统角色信息分页列表     * @param request     * @return     */    @RequestMapping("list")    @ResponseBody    public ResponseMessage list(HttpServletRequest request) {        try {            QueryFilter filter = new QueryFilter("listPage", request);            filter.addFilter("enterpriseCode", ContextSupportUtil.getCurrentEnterpriseCode());            Pager<SysRole> roleList = sysRoleService.getPageBySqlKey(filter);            return ResponseMessage.success("获取系统角色信息分页列表成功。", roleList);        } catch (Exception e) {            logger.error("获取系统角色信息分页列表失败：" + e.getMessage(), e);            return ResponseMessage.fail("获取系统角色信息分页列表失败!", e);        }    }    /**     * 获取所有角色分类信息     * @param request     * @return     */    @RequestMapping("allCategory")    @ResponseBody    public ResponseMessage allCategory(HttpServletRequest request) {        try {            QueryFilter filter = new QueryFilter("listCategory", request);            filter.addFilter("enterpriseCode", ContextSupportUtil.getCurrentEnterpriseCode());            List<String> categoryList = sysRoleService.getListCategory(filter);            return ResponseMessage.success("获取所有角色分类信息成功！", categoryList);        } catch (Exception e) {            logger.error("获取所有角色分类信息失败：" + e.getMessage(), e);            return ResponseMessage.fail("获取所有角色分类信息失败!", e);        }    }    /**     * 添加或更新角色信息     * @param request     * @param sysRole     * @return     */    @RequestMapping("save")    @ResponseBody    public ResponseMessage save(HttpServletRequest request, SysRole sysRole) {        Long roleId = RequestUtil.getLong(request, "roleId");        String message = "更新";        if(roleId == 0){            message = "添加";        }        // 角色名称必填        String roleName = RequestUtil.getString(request, "roleName");        if(StringUtils.isBlank(roleName)){            logger.error(message + "角色信息失败：角色名称为空");            return ResponseMessage.fail(message + "角色信息失败：角色名称为空！");        }        try {            // 角色所属企业为创建用户的当前企业            String enterpriseCode = ContextSupportUtil.getCurrentEnterpriseCode();            sysRole.setEnterpriseCode(enterpriseCode);            // 验证角色名称的唯一性            SysRole sysRoleDb = sysRoleService.getByRoleName(roleName, roleId, enterpriseCode);            if(sysRoleDb != null){                logger.error(message + "角色信息失败：角色名称【" + roleName + "】已经存在！");                return ResponseMessage.fail("角色信息失败：角色名称【" + roleName + "】已经存在！");            }            sysRoleService.saveRole(sysRole);            return ResponseMessage.success(message + "角色信息成功！");        } catch (Exception e) {            logger.error(message + "角色信息失败：" + e.getMessage(), e);            return ResponseMessage.fail(message + "角色信息失败!", e);        }    }    /**     * 删除角色     * @param request     * @return     */    @RequestMapping("del")    @ResponseBody    public ResponseMessage del(HttpServletRequest request) {        Long[] roleIds = RequestUtil.getLongAryByStr(request, "roleId");        if(roleIds == null){            logger.error("删除角色信息失败：角色ID为空");            return ResponseMessage.fail("删除角色信息失败：角色ID为空！");        }        try {            sysRoleService.delByIds(roleIds);            String message = MessageUtil.getMessage();            if(StringUtil.isEmpty(message)){                return ResponseMessage.success("删除角色信息成功！");            }            return ResponseMessage.success(message.replaceAll("\r\n", "") + "角色中挂有用户，请先清空角色中所有用户！");        } catch (Exception e) {            logger.error("删除角色信息失败：" + e.getMessage(), e);            return ResponseMessage.fail("删除角色信息失败!", e);        }    }    /**     * 获取角色信息详情     * @param request     * @return     */    @RequestMapping("details")    @ResponseBody    public ResponseMessage details(HttpServletRequest request) {        Long roleId = RequestUtil.getLong(request, "roleId");        if(roleId == 0){            logger.error("获取角色信息详情失败：角色ID为空！");            return ResponseMessage.fail("获取角色信息详情失败：请求参数错误！");        }        try {            SysRole sysRole = sysRoleService.findById(roleId);            if(sysRole == null){                logger.error("获取角色信息详情失败：根据角色ID【" + roleId + "】未查询到角色信息！");                return ResponseMessage.fail("获取角色信息详情失败：该角色不存在！");            }            return ResponseMessage.success("获取角色信息详情成功！", sysRole);        } catch (Exception e) {            logger.error("获取角色信息详情失败：" + e.getMessage(), e);            return ResponseMessage.fail("获取角色信息详情失败!", e);        }    }    /**     * 角色禁用/启用     * @param request     * @return     * @throws Exception     */    @RequestMapping("enabledRole")    @ResponseBody    public ResponseMessage enabledRole(HttpServletRequest request) {        Long roleId = RequestUtil.getLong(request, "roleId");        Short enabled = RequestUtil.getShort(request, "enabled");        String message = "禁用";        if(enabled == 1){            message = "启用";        }        if(roleId == 0){            logger.error(message + "角色失败：角色ID为空！");            return ResponseMessage.fail(message + "角色失败：请求参数错误！");        }        try {            sysRoleService.updEnabled(roleId, enabled);            return ResponseMessage.success(message + "角色成功！");        } catch (Exception e) {            logger.error(message + "角色失败：" + e.getMessage(), e);            return ResponseMessage.fail(message + "角色失败：", e);        }    }    /**     * 复制角色信息     * @return     */    @RequestMapping("copyRole")    @ResponseBody    public ResponseMessage copyRole(){        return ResponseMessage.success("复制角色信息成功！");    }}