package com.suneee.eas.oa.service.car.impl;import com.suneee.eas.common.service.impl.BaseServiceImpl;import com.suneee.eas.common.utils.ContextSupportUtil;import com.suneee.eas.common.utils.IdGeneratorUtil;import com.suneee.eas.flowable.service.ProcessCoreService;import com.suneee.eas.oa.dao.car.CarArrangeDao;import com.suneee.eas.oa.model.car.*;import com.suneee.eas.oa.service.car.*;import com.suneee.eas.oa.service.user.UserService;import com.suneee.eas.oa.util.CarManagerUtil;import com.suneee.platform.model.system.SysUser;import org.apache.logging.log4j.LogManager;import org.apache.logging.log4j.Logger;import org.flowable.bpmn.model.FlowNode;import org.flowable.bpmn.model.SequenceFlow;import org.flowable.engine.RuntimeService;import org.flowable.engine.TaskService;import org.flowable.engine.runtime.ProcessInstance;import org.flowable.task.api.Task;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Propagation;import org.springframework.transaction.annotation.Transactional;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;/** * @program: eas-parent * @description: 车俩安排ServiceImpl * @author: liuhai * @create: 2018-08-21 16:56 **/@Servicepublic class CarArrangeServiceImpl extends BaseServiceImpl<CarArrange> implements CarArrangeService{    private static final Logger logger = LogManager.getLogger(CarArrangeServiceImpl.class);    private CarArrangeDao carArrangeDao;    @Autowired    private ArrangeCarDriverService arrangeCarDriverService;    @Autowired    private CarApplyService carApplyService;    @Autowired    private CarInfoService carInfoService;    @Autowired    private CarDriverService carDriverService;    @Autowired    private CarAuditService carAuditService;    @Autowired    private RuntimeService runtimeService;    @Autowired    private TaskService taskService;    @Autowired    private UserService userService;    @Autowired    private CarArrangeHistoryService carArrangeHistoryService;    @Autowired    private ProcessCoreService processCoreService;    @Autowired    public void setCarArrangeDao(CarArrangeDao carArrangeDao) {        this.carArrangeDao = carArrangeDao;        super.setBaseDao(carArrangeDao);    }    /**     * 保存车辆安排     * @param model     * @return     */    @Transactional(propagation= Propagation.NOT_SUPPORTED)    @Override    public int save(CarArrange model) {        CarInfo carInfo = carInfoService.findById(model.getCarId());        if(null == carInfo){            throw new RuntimeException("派车的车辆已不存在！");        }        try {            //企业用户信息获取            String enterpriseCode = ContextSupportUtil.getCurrentEnterpriseCode();            SysUser user = ContextSupportUtil.getCurrentUser();            Long userId = user.getUserId();            String name = ContextSupportUtil.getCurrentUsername();            Date currentTime = new Date();            //自动创建车辆申请...            CarApply apply = new CarApply();            apply.setApplyId(IdGeneratorUtil.getNextId());            apply.setApplicantId(userId);            apply.setApplicantName(name);            apply.setDestination(model.getDestination());            apply.setStartTime(model.getStartTime());            apply.setEndTime(model.getEndTime());            apply.setEnterpriseCode(enterpriseCode);            apply.setInformType(model.getInformType());            apply.setOrigin(model.getOrigin());            apply.setExpMileage(model.getExpMileage());            apply.setPassengerCount(model.getPassengerCount());            apply.setPassengerIds(model.getPassengerIds());            apply.setStatus(CarApply.STATUS_CAR_DRIVE_PENDDING);            apply.setIsDelete(CarApply.DELETE_NO);            apply.setCreateBy(userId);            apply.setCreateTime(currentTime);            apply.setIsSelfDrive(CarApply.SELF_DRIVE_NO);            apply.setPassengerNames(model.getPassengerNames());            apply.setContent(model.getContent());            apply.setMobile(user.getMobile());            //启动流程            Map<String,Object> variables=new HashMap<>();            variables.put("form",apply);            variables.put("userId",userId.toString());            variables.put("startUserId",userId.toString());            ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(CarApply.BPMN_KEY_CAR,variables);            apply.setProcInstId(processInstance.getProcessInstanceId());            carApplyService.autoSave(apply);            Task task =taskService.createTaskQuery().processInstanceId(apply.getProcInstId()).taskCandidateOrAssigned(String.valueOf(ContextSupportUtil.getCurrentUserId())).singleResult();            taskService.complete(task.getId(), variables);            //自动审批            CarApply carApply = carApplyService.findById(apply.getApplyId());            taskService.complete(carApply.getTaskId(), variables);            CarDriver carDriver = carDriverService.findById(model.getDriverId());            //直接派车            SysUser driverUser = userService.getUserDetails(carDriver.getDriverId());            CarArrange carArrange = this.findByApplyId(carApply.getApplyId());            carArrange.setDriverId(model.getDriverId());            carArrange.setCarId(model.getCarId());            carArrange.setMobile(driverUser.getMobile());            this.update(carArrange);            carAuditService.doCarAdminAudit(carArrange.getTaskId(), carDriver.getDriverId().toString());        } catch (Exception e) {            logger.error("直接派车内部错误：" + e.getMessage(), e);            //异常，如果车辆锁定，则解锁            carInfo.setIsLock(CarInfo.CAR_ISLOCK_FALSE);            carInfoService.update(carInfo);            return 0;            //手动回滚//          TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();        }        return 1;    }    /**     * 更细车辆安排     * @param model     * @return     */    @Override    public int update(CarArrange model) {        model.setUpdateBy(ContextSupportUtil.getCurrentUserId());        model.setUpdateByName(ContextSupportUtil.getCurrentUsername());        model.setUpdateTime(new Date());        super.update(model);        //锁定车辆        CarInfo carInfo = carInfoService.findById(model.getCarId());        if(null == carInfo){            throw new RuntimeException("派车的车辆已不存在！");        }        //获取司机        CarDriver carDriver = carDriverService.findById(model.getDriverId());        if(null == carDriver){            throw new RuntimeException("派车的司机已不存在！");        }        //删除记录        arrangeCarDriverService.deleteByArrId(model.getArrId());        //生成车辆安排、车辆信息、驾驶员关联表        ArrangeCarDriver acd = new ArrangeCarDriver();        acd.setId(IdGeneratorUtil.getNextId());        acd.setArrId(model.getArrId());        acd.setCarId(model.getCarId());        acd.setCarName(carInfo.getName());        acd.setDriverId(model.getDriverId());        acd.setDriverName(carDriver.getName());        arrangeCarDriverService.save(acd);        return 1;    }    /**     * 删除车辆安排     * @param ids     */    @Transactional    @Override    public void deleteByIds(Long[] ids) {        for(Long id:ids){            super.deleteById(id);            arrangeCarDriverService.deleteByArrId(id);        }    }    /**     * 派车     * @param arrange     */    @Override    public void sendCar(CarArrange arrange, String carDriverId) {        carAuditService.doCarAdminAudit(arrange.getTaskId(), carDriverId);    }    /**     *拒绝派车     */    @Override    public void sendRefuse(CarArrange arrange, int status){        super.update(arrange);        Task task = taskService.createTaskQuery().taskId(arrange.getTaskId()).singleResult();        Task currentTask = taskService.createTaskQuery().processInstanceId(task.getProcessInstanceId()).singleResult();        //车辆申请回复初始状态        CarApply carApply = taskService.getVariable(currentTask.getId(), "form", CarApply.class);        if(currentTask==null) {            throw new RuntimeException("流程未启动或已执行完成，操作失败");        }        //流程返回到一个节点        Map<String, Object> param = processCoreService.jumpToFirst(task.getProcessInstanceId());        //清理执行的历史数据        carApplyService.cleanData(currentTask, carApply, status, "true", "拒绝派车");        //保存派车历史        carApply.setStatus(status);        saveCarSendRefuseHistory(carApply, arrange);        FlowNode currentFlowNode = (FlowNode)param.get("currentFlowNode");        List<SequenceFlow> currentFlows = (List<SequenceFlow>)param.get("currentFlows");        //恢复正常流程        processCoreService.jumpToCurrent(currentFlowNode, currentFlows);    }    @Override    public CarArrange findByApplyId(Long applyId){        return carArrangeDao.findByApplyId(applyId);    }    /**     * 更细任务id     * @param applyId     * @param taskId     */    @Override    public void updateTaskId(Long applyId, String taskId) {        carArrangeDao.updateTaskId(applyId, taskId);    }    @Override    public void deleteByApplyId(Long applyId){        carArrangeDao.deleteByApplyId(applyId);    }    /**     * 不派车记录     * @param carApply     */    private void saveCarSendRefuseHistory(CarApply carApply, CarArrange arrange){        //保存不派车记录        CarArrangeHistory history = new CarArrangeHistory();        history.setId(IdGeneratorUtil.getNextId());        history.setArrId(arrange.getArrId());        history.setApplyId(carApply.getApplyId());        history.setRemarks(arrange.getRemarks());        history.setEnterpriseCode(carApply.getEnterpriseCode());        history.setInformType(carApply.getInformType());        history.setApplicantName(carApply.getApplicantName());        history.setStartTime(carApply.getStartTime());        history.setEndTime(carApply.getEndTime());        history.setPassengerCount(carApply.getPassengerCount());        history.setPassengerIds(carApply.getPassengerIds());        history.setStatus(carApply.getStatus());        history.setStatusString(CarManagerUtil.getStatusString(carApply.getStatus()));        history.setContent(carApply.getContent());        history.setOrigin(carApply.getOrigin());        history.setDestination(carApply.getDestination());        history.setExpMileage(carApply.getExpMileage());        history.setPassengerNames(carApply.getPassengerNames());        history.setRefuseReason(arrange.getRefuseReason());        history.setProcInstId(carApply.getProcInstId());        history.setTaskId(arrange.getTaskId());        history.setMobile(arrange.getMobile());        history.setAssigneeId(ContextSupportUtil.getCurrentUserId());        history.setAssigneeName(ContextSupportUtil.getCurrentUsername());        carArrangeHistoryService.save(history);    }}