package com.suneee.eas.oa.controller.system;import com.suneee.eas.common.component.QueryFilter;import com.suneee.eas.common.component.ResponseMessage;import com.suneee.eas.common.constant.FunctionConstant;import com.suneee.eas.common.constant.ModuleConstant;import com.suneee.eas.common.utils.ContextSupportUtil;import com.suneee.eas.common.utils.RequestUtil;import com.suneee.eas.common.utils.StringUtil;import com.suneee.eas.oa.model.system.Resources;import com.suneee.eas.oa.service.system.ResourcesService;import com.suneee.eas.oa.service.system.RoleResourcesService;import com.suneee.eas.oa.service.user.UserService;import com.suneee.platform.model.system.SysUser;import org.apache.logging.log4j.LogManager;import org.apache.logging.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.web.multipart.MultipartFile;import org.springframework.web.multipart.MultipartHttpServletRequest;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.io.OutputStream;import java.net.URLEncoder;import java.util.*;/** * @program: eas-parent * @description: 资源管理类 * @author: liuhai * @create: 2018-08-08 13:54 **/@Controller@RequestMapping(ModuleConstant.SYSTEM_MODULE + FunctionConstant.RESOURCE_MANAGER)public class ResourceApiController {    private static final Logger log = LogManager.getLogger(ResourceApiController.class);    @Autowired    private ResourcesService resourcesService;    @Autowired    private UserService userService;    @Autowired    private RoleResourcesService roleResourcesService;    /**     * 根据resid获取资源详情     *     * @param request     * @return     * @throws Exception     */    @RequestMapping("details")    @ResponseBody    public ResponseMessage details(HttpServletRequest request) {        Long resId = RequestUtil.getLong(request, "resId");        if (resId == 0) {            log.error("获取系统资源详情失败：资源ID为空！");            return ResponseMessage.fail("获取系统资源详情失败：资源ID为空！");        }        try {            Resources resources = resourcesService.findById(resId);            if (resources == null) {                log.error("获取系统资源详情失败：ID为【" + resId + "】的系统资源不存在");                return ResponseMessage.fail("获取系统资源详情失败：ID为【" + resId + "】的系统资源不存在");            }            // 获取父资源名称            Resources parentRes = resourcesService.findById(resources.getParentId());            if (parentRes != null) {                resources.setParentName(parentRes.getResName());            }            return ResponseMessage.success("获取系统资源详情成功！", resources);        } catch (Exception e) {            log.error("获取系统资源详情失败：" + e.getMessage(), e);            return ResponseMessage.fail("获取系统资源详情失败：" + e.getMessage(), e);        }    }    /**     * 获取用户的资源权限信息     *     * @param request     * @return     * @throws Exception     */    @RequestMapping("getRoleResources")    @ResponseBody    public ResponseMessage getRoleResources(HttpServletRequest request) {        try {            List<Resources> resourcesList = resourcesService.getSysMenu(ContextSupportUtil.getCurrentUser());            this.addIconCtxPath(resourcesList, request.getContextPath());            return ResponseMessage.success("获取用户的资源权限信息成功！", resourcesList);        } catch (Exception e) {            log.error("获取用户的资源权限信息失败：" + e.getMessage(), e);            return ResponseMessage.fail("获取用户的资源权限信息失败：" + e.getMessage(), e);        }    }    /**     * 检查用户有没有资源权限     * @param request     * @return     */    @RequestMapping("checkRoleResources")    @ResponseBody    public ResponseMessage checkRoleResources(HttpServletRequest request) {        try {            Long userId=RequestUtil.getLong(request,"userId",null);            SysUser user=null;            if (userId!=null){                user=userService.getUserDetails(userId);                if (user==null){                    log.error("用户不存在，userId="+userId);                    return ResponseMessage.fail("用户不存在：userId=" + userId);                }            }else {                user=ContextSupportUtil.getCurrentUser();            }            List<Resources> resourcesList = resourcesService.getSysMenu(user);            return ResponseMessage.success("检查用户资源数量成功！", resourcesList.size());        } catch (Exception e) {            log.error("检查用户资源数量失败：" + e.getMessage(), e);            return ResponseMessage.fail("检查用户资源数量失败：" + e.getMessage());        }    }    /**     * 给资源的图标添加上下文的路径。     *     * @param list     * @param ctxPath     */    private void addIconCtxPath(List<Resources> list, String ctxPath) {        for (Iterator<Resources> it = list.iterator(); it.hasNext(); ) {            Resources res = it.next();            String icon = res.getIcon();            if (StringUtil.isNotEmpty(icon)) {                res.setIcon(ctxPath + icon);            }        }    }    /**     * 获取系统资源列表     *     * @param request     * @return     * @throws Exception     */    @RequestMapping("getAll")    @ResponseBody    public ResponseMessage getAll(HttpServletRequest request) {        QueryFilter filter = new QueryFilter("getAll", request);        try {            List<Resources> resources = resourcesService.getAll(filter);            return ResponseMessage.success("获取资源列表成功！", resources);        } catch (Exception e) {            log.error("获取资源列表失败：" + e.getMessage(), e);            return ResponseMessage.fail("获取资源列表失败：" + e.getMessage(), e);        }    }    /**     * 添加资源     *     * @param request     * @param resources     * @return     * @throws Exception     */    @RequestMapping("save")    @ResponseBody    public ResponseMessage save(HttpServletRequest request, Resources resources) {        // 判断别名的唯一性        String alias = RequestUtil.getString(request, "alias");        Resources resourcesDb = resourcesService.getByAliasForCheck(resources.getResId(), alias);        if (resourcesDb != null) {            log.error("保存资源信息失败：资源别名【" + alias + "】已经存在！");            return ResponseMessage.fail("保存资源信息失败：资源别名【" + alias + "】已经存在！");        }        try {            resourcesService.saveResource(resources);            return ResponseMessage.success("保存资源信息成功。");        } catch (Exception e) {            log.error("保存资源信息失败：" + e.getMessage(), e);            return ResponseMessage.fail("保存资源信息失败：" + e.getMessage(), e);        }    }    /**     * 资源显示/隐藏     *     * @param request     * @return     * @throws Exception     */    @RequestMapping("setDisplay")    @ResponseBody    public ResponseMessage setDisplay(HttpServletRequest request) {        Long resId = RequestUtil.getLong(request, "resId");        Short isDisplayInMenu = RequestUtil.getShort(request, "isDisplayInMenu");        String message = "设置资源显示";        if (!Resources.IS_DISPLAY_IN_MENU_Y.equals(isDisplayInMenu)) {            message = "设置资源隐藏";        }        if (resId == 0) {            log.error(message + "失败：资源ID为空！");            return ResponseMessage.fail(message + "失败：资源ID为空！");        }        try {            resourcesService.updDisplay(resId, isDisplayInMenu);            return ResponseMessage.success(message + "成功。");        } catch (Exception e) {            log.error(message + "失败：" + e.getMessage(), e);            return ResponseMessage.fail(message + "失败：" + e.getMessage(), e);        }    }    /**     * 资源排序列表     *     * @param request     * @return     * @throws Exception     */    @RequestMapping("siblingResources")    @ResponseBody    public ResponseMessage siblingResources(HttpServletRequest request) {        Long resId = RequestUtil.getLong(request, "resId");        if (resId == 0) {            log.error("获取同级资源列表失败：资源ID为空！");            return ResponseMessage.fail("获取同级资源列表失败：资源ID为空！");        }        try {            Resources resources = resourcesService.findById(resId);            if (resources == null) {                log.error("获取同级资源列表失败：系统不存在ID为【" + resId + "】的资源！");                return ResponseMessage.fail("获取同级资源列表失败：系统不存在ID为【" + resId + "】的资源！");            }            List<Resources> resourcesList = resourcesService.getByParentId(resources.getParentId());            return ResponseMessage.success("获取同级资源列表成功！", resourcesList);        } catch (Exception e) {            log.error("获取同级资源列表失败：" + e.getMessage(), e);            return ResponseMessage.fail("获取同级资源列表失败：" + e.getMessage(), e);        }    }    /**     * 资源排序     *     * @param request     * @return     * @throws Exception     */    @RequestMapping("sort")    @ResponseBody    public ResponseMessage sort(HttpServletRequest request) {        Long[] resIds = RequestUtil.getLongAryByStr(request, "resId");        if (resIds == null) {            log.error("资源排序失败：资源ID为空！");            return ResponseMessage.fail("资源排序失败：资源ID为空！");        }        try {            resourcesService.sort(resIds);            return ResponseMessage.success("资源排序成功。");        } catch (Exception e) {            log.error("资源排序失败：" + e.getMessage(), e);            return ResponseMessage.fail("资源排序失败：" + e.getMessage(), e);        }    }    /**     * 根据资源Id 导出资源     *     * @param request     * @param response     * @throws Exception     */    @RequestMapping("exportXml")    public void exportXml(HttpServletRequest request, HttpServletResponse response){        Long[] resId=RequestUtil.getLongAryByStr(request, "resId");        OutputStream out = null;        if(resId.length!=0){            Map<String, Boolean> map = new HashMap<String, Boolean>();            map.put("resources", true);            try{                List<Resources> resourcesList = new ArrayList<>();                for(int i =0;i<resId.length;i++){                    Resources resources=resourcesService.findById(resId[i]);                    resourcesList.add(resources);                }                String fileName = "resources" ;                String strXml=resourcesService.exportXml(resId,map);                response.setContentType("application/octet-stream");                response.setHeader("Content-Disposition", "attachment;filename=" +URLEncoder.encode(fileName,"UTF-8") + ".xml");                out = response.getOutputStream();                out.write(strXml.getBytes());            } catch (Exception e) {                e.printStackTrace();                log.error(e.getMessage());            }finally{                try {                    if(null != out){                        out.close();                    }                } catch (IOException e) {                    e.printStackTrace();                }            }        }    }    /**     * @param request     * @throws Exception     */    @RequestMapping("importXml")    @ResponseBody    public ResponseMessage importXml(MultipartHttpServletRequest request) throws IOException{        long resId = RequestUtil.getLong(request, "resId");        MultipartFile fileLoad = request.getFile("xmlFile");        try {            Resources parentRes = null;            if(resId!=0){                parentRes = resourcesService.findById(resId);            }            String mess = resourcesService.importXml(fileLoad.getInputStream(), parentRes);            if(StringUtil.isNotEmpty(mess)){                return ResponseMessage.fail("导入失败:" + mess);            }            return ResponseMessage.success("导入成功。");        } catch (Exception ex) {            log.error("导入失败:"+ ex.getMessage(), ex);            return ResponseMessage.fail("导入失败:", ex);        }    }    /**     * 删除资源     *     * @param request     * @return     * @throws Exception     */    @RequestMapping(value = "del")    @ResponseBody    public ResponseMessage del(HttpServletRequest request){        Long[] resIds = RequestUtil.getLongAryByStr(request, "resId");        if (resIds == null) {            log.error("删除系统资源信息失败：资源ID为空！");            return ResponseMessage.fail("删除系统资源信息失败：资源ID为空！");        }        try {            resourcesService.delByIds(resIds);            return ResponseMessage.success("删除系统资源信息成功。");        } catch (Exception e) {            log.error("删除系统资源信息失败：" + e.getMessage(), e);            return ResponseMessage.fail("删除系统资源信息失败：" + e.getMessage(), e);        }    }    /**     * 获取角色的授权资源列表     * @param request     * @return     */    @RequestMapping("authList")    @ResponseBody    public ResponseMessage authList(HttpServletRequest request){        Long roleId = RequestUtil.getLong(request, "roleId");        try {            List<Resources> resources = roleResourcesService.getByChecked(roleId);            return ResponseMessage.success("获取角色的授权资源列表成功！", resources);        } catch (Exception e) {            log.error("获取角色的授权资源列表失败：" + e.getMessage(), e);            return ResponseMessage.fail("获取角色的授权资源列表失败!", e);        }    }}