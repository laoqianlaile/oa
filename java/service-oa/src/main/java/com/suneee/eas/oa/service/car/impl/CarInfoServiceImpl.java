package com.suneee.eas.oa.service.car.impl;import com.suneee.eas.common.service.impl.BaseServiceImpl;import com.suneee.eas.common.utils.ContextSupportUtil;import com.suneee.eas.common.utils.IdGeneratorUtil;import com.suneee.eas.oa.dao.car.CarInfoDao;import com.suneee.eas.oa.model.car.CarInfo;import com.suneee.eas.oa.model.car.OilCard;import com.suneee.eas.oa.service.car.CarInfoService;import com.suneee.eas.oa.service.car.OilCardService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.Date;/** * @program: eas-parent * @description: 车辆信息ServiceImpl * @author: liuhai * @create: 2018-08-20 13:54 **/@Servicepublic class CarInfoServiceImpl extends BaseServiceImpl<CarInfo> implements CarInfoService{    private CarInfoDao carInfoDao;    @Autowired    private OilCardService oilCardService;    @Autowired    public void setCarInfoDao(CarInfoDao carInfoDao) {        this.carInfoDao = carInfoDao;        setBaseDao(carInfoDao);    }    /**     * 根据id查找车辆信息详情     * @param id     * @return     */    @Override    public CarInfo findById(Long id) {        return super.findById(id);    }    /**     * 保存车辆信息     * @param model     * @return     */    @Override    public int save(CarInfo model) {        //生成主键        Long id = IdGeneratorUtil.getNextId();        model.setCarId(id);        //设置所属企业        model.setEnterpriseCode(ContextSupportUtil.getCurrentEnterpriseCode());        //设置创建人信息        Long currentUserId = ContextSupportUtil.getCurrentUserId();        String name = ContextSupportUtil.getCurrentUsername();        model.setCreateBy(currentUserId);        model.setCreateByName(name);        model.setUpdateBy(currentUserId);        model.setUpdateByName(name);        Date currentTime = new Date();        model.setCreateTime(currentTime);        model.setUpdateTime(currentTime);        OilCard oilCard = oilCardService.findById(model.getCardId());        if(null != oilCard){            byte status = 0;            oilCard.setStatus(status);        }        oilCardService.update(oilCard);        return super.save(model);    }    /**     * 更新车辆信息     * @param model     * @return     */    @Override    public int update(CarInfo model) {        CarInfo info = this.findById(model.getCarId());        if(null != info.getCardId() && !info.getCardId().equals(model.getCardId())){            OilCard oilCard = oilCardService.findById(info.getCardId());            if(null != oilCard){                byte status = 1;                oilCard.setStatus(status);                oilCardService.update(oilCard);            }            OilCard oilCardNew = oilCardService.findById(model.getCardId());            if(null != oilCardNew){                byte status = 0;                oilCardNew.setStatus(status);                oilCardService.update(oilCardNew);            }        }else{            OilCard oilCardNew = oilCardService.findById(model.getCardId());            if(null != oilCardNew){                byte status = 0;                oilCardNew.setStatus(status);                oilCardService.update(oilCardNew);            }        }        model.setUpdateBy(ContextSupportUtil.getCurrentUserId());        model.setUpdateByName(ContextSupportUtil.getCurrentUsername());        model.setUpdateTime(new Date());        return super.update(model);    }    /**     * 删除车辆信息     * @param id     * @return     */    @Override    public int deleteById(Long id) {        return super.deleteById(id);    }    /**     * 车牌号是否存在     * @param plateNum     * @return     */    @Override    public boolean isPlateNumExist(String plateNum, Long carId){        return carInfoDao.isPlateNumExist(plateNum, carId);    }    @Override    public void removeById(Long carId) {        carInfoDao.removeById(carId);    }}