package com.suneee.eas.common.config;import com.amazonaws.ClientConfiguration;import com.amazonaws.auth.AWSCredentials;import com.amazonaws.auth.AWSStaticCredentialsProvider;import com.amazonaws.auth.BasicAWSCredentials;import com.amazonaws.client.builder.AwsClientBuilder;import com.amazonaws.services.s3.AmazonS3;import com.amazonaws.services.s3.AmazonS3ClientBuilder;import com.suneee.eas.common.uploader.s3.CloudStorageHandler;import com.suneee.eas.common.uploader.s3.MultiUploader;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.core.env.Environment;/** * @program: eas-parent * @description: minio存储集成s3的配置 * @author: liuhai * @create: 2018-10-22 10:20 **/@Configurationpublic class S3UploaderAutoConfigure {    private String url;    private Integer port;    private String accessKey;    private String secretKey;    private String region;    private String singer;    private Environment env;    @Autowired    public void setEnv(Environment env) {        this.env = env;        this.url = env.getProperty("uploader.s3.host");        this.port = env.getProperty("uploader.s3.port", Integer.class);        this.accessKey = env.getProperty("uploader.s3.accessKey");        this.secretKey = env.getProperty("uploader.s3.secretKey");        this.region = env.getProperty("uploader.s3.region");        this.singer = env.getProperty("uploader.s3.singer");    }    @Bean    public AmazonS3 getAmazonS3(){        AWSCredentials credentials = new BasicAWSCredentials(accessKey, secretKey);        ClientConfiguration clientConfiguration = new ClientConfiguration();        clientConfiguration.setSignerOverride(singer);        String endPoint = url + ":" + port;        return  AmazonS3ClientBuilder                .standard()                .withEndpointConfiguration(new AwsClientBuilder.EndpointConfiguration(endPoint, region))                .withPathStyleAccessEnabled(true)                .withClientConfiguration(clientConfiguration)                .withCredentials(new AWSStaticCredentialsProvider(credentials))                .build();    }    @Bean    public MultiUploader getMultiUploader(){        return new MultiUploader();    }    @Bean    public CloudStorageHandler getCloudStorageHandler(){        return new CloudStorageHandler();    }}